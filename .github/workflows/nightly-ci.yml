# Builds MegaMek for CI each Night
#
# Jobs:
#    - nightly_ci: Build MegaMek for CI across multiple platforms and Java versions.
name: MegaMek Nightly CI

on:
  schedule:
    # Nightly at Midnight (UTC)
    # ref: https://crontab.guru/every-night
    - cron:  '0 0 * * *'

# Setup the Build Scan "VCS" link for all gradle invocations
env:
  GRADLE_OPTS: "-Dscan.link.VCS=https://github.com/MegaMek/megamek/commit/${{ github.sha }}"

jobs:
  nightly_ci:
    runs-on: ${{ matrix.os }}

    # Run this job once for each combination in the matrix below.
    strategy:
      matrix:
        os: [ ubuntu-latest, windows-latest ]
        java-distribution: [ temurin ]
        java-version: [ 11, 17 ]
      fail-fast: false

    name: Nightly MegaMek CI ${{ matrix.os }} on ${{ matrix.java-distribution }} JDK ${{ matrix.java-version }}

    steps:
    # Checkout the latest source and put it in: ./megamek
    - uses: actions/checkout@v3
      with:
        path: megamek

    # Setup the requested Java Distribution and Version from the matrix
    - name: Set up ${{ matrix.java-distribution }} JDK ${{ matrix.java-version }}
      uses: actions/setup-java@v3
      with:
        distribution: ${{ matrix.java-distribution }}
        java-version: ${{ matrix.java-version }}

    # Don't run this for Windows.
    - name: Grant execute permission for gradlew (*nix or MacOS)
      working-directory: megamek
      run: chmod +x gradlew
      if: runner.os != 'Windows'

    # Include --stacktrace to make some build failures easier to figure out.
    - name: Build with Gradle
      uses: gradle/gradle-build-action@v2
      with:
        arguments: clean build -x test --continue --stacktrace --scan
        build-root-directory: megamek

    - name: Upload Test Logs on Failure
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: ${{ matrix.os }}-${{ matrix.java-distribution }}-jdk${{ matrix.java-version }}-ci-failure-logs
        path: megamek/megamek/build/reports/

    # Put the non-Windows Release in an artifact
    #
    # NB: Due to a GitHub Actions limitation we won't know what the filename is in order to display it somewhere.
    - name: Upload Nix/Mac Releases
      uses: actions/upload-artifact@v3
      if: always() && matrix.os == 'ubuntu-latest'
      with:
        name: mm-release-nix-mac-${{ matrix.java-distribution }}-jdk${{ matrix.java-version }}
        path: megamek/megamek/build/distributions/*.tar

    # Put the Windows Release in an artifact
    #
    # NB: Due to a GitHub Actions limitation we won't know what the filename is in order to display it somewhere.
    - name: Upload Windows Release
      uses: actions/upload-artifact@v3
      if: always() && matrix.os == 'windows-latest'
      with:
        name: mm-release-win-${{ matrix.java-distribution }}-jdk${{ matrix.java-version }}
        path: megamek/megamek/build/distributions/megamek-windows-*.zip
