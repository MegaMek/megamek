<?xml version="1.0"?>
<!-- This is an ant build file. See: "http://jakarta.apache.org/ant" -->
<!-- To see userlevel commands and their descpription type 'ant -projecthelp' -->
<!-- from a command prompt where this file is located -->

<project default="all" name="MegaMek" basedir=".">

<!-- ==================
     PROPERTIES SECTION
     ================== -->

    <property name="dir.apidoc" value="apidocs"/>
    <property name="dir.build" value="classes"/>
    <property name="dir.build.test" location="${dir.build}/unittests"/>
    <property name="dir.build.testreport" location="${dir.build}/testreport"/>
    <property name="dir.build.teststaging" location="${dir.build}/teststaging"/>
    <!-- <property name="confdir" value="mmconf"/> confdir not used; proposed change to "dir.conf" or delete -->
    <property name="dir.data" value="data"/>
    <!-- <property name="docdir" value="docs"/> docdir not used; proposed change to "dir.docs" or delete -->
    <property name="dir.lib.java" value="lib"/>
    <property name="dir.lib.test" value="lib-test"/>
    <property name="dir.log" value="logs"/>
    <property name="dir.prop" value="i18n"/>
    <property name="dir.src.java" value="src"/>
    <property name="dir.src.test" location="unittests"/>
    <!-- <property name="util" value="packaging_utils"/> util not used; proposed change to "dir.util" or delete -->

    <property name="timestampfile" value="${dir.log}/timestamp"/>

    <property name="TinyXMLsrc" value="TinyXML07-src.zip"/>

    <!-- Name of the target jarfile and the class containing the main-Method -->
    <property name="jarfile" value="MegaMek.jar"/>
    <property name="jarmainclass" value="megamek.MegaMek"/>

    <!-- This is the relative path to the 'data' directory -->
    <property name="dataclasspath" value="."/>

<!-- =================
     CLASSPATH SECTION
     ================= -->

    <!-- Build the list of the lib/*.jar files to be included in the "Class-Path" attribute of the jar's manifest dynamically.  -->
    <pathconvert pathsep=" " property="jarclasspath">
        <path>
            <fileset dir="lib/" includes="*.jar" />
        </path>
        <mapper>
            <chainedmapper>
                <flattenmapper/>
                <globmapper from="*" to="lib/*"/>
            </chainedmapper>
        </mapper>
    </pathconvert>

<!-- ===============
     TARGETS SECTION
     =============== -->

    <!-- touch a file in dir.log to mark (start of) most recent operation -->
    <target name="init">
        <mkdir dir="${dir.log}" />
        <tstamp/>
        <touch file="${timestampfile}" />
    </target>

    <target name="compile" depends="init" description="Compile java sources">
        <mkdir dir="${dir.build}" />
        <javac debug="true" debuglevel="lines,source" target="1.7" source="1.7"
               destdir="${dir.build}" srcdir="${dir.src.java}" memoryInitialSize="512m"
               memoryMaximumSize="512m" fork="true" includeantruntime="false">
            <classpath>
                <pathelement location="${basedir}" />
                <fileset dir="${dir.lib.java}" includes="*.jar" />
            </classpath>
        </javac>
    </target>

    <!-- generate current equipment.txt -->
    <target name="compile.equp" />
<!-- Commented-out until it is determined what exactly it is for...
    <target name="compile.equp" depends="compile.java">
        <java classname="megamek.MegaMek" fork="true">
            <arg line="-eqdb docs/equipment.txt" />
            <classpath>
                <pathelement path="${dir.build}" />
                <fileset dir="${dir.lib.java}" includes="*.jar" />
            </classpath>
        </java>
    </target>
-->

    <!-- Kwirk: 'run' has never done anything meaningful on my system -->
    <target name="run" depends="compile, compile.equp" description="Build and run Megamek">
        <echo message="Running MegaMek from build directory: ${dir.build}"/>
        <java classname="megamek.MegaMek" fork="true">
            <classpath>
                <pathelement path="${basedir}"/>
                <pathelement path="${dir.build}"/>
                <fileset dir="${dir.lib.java}" includes="*.jar"/>
                <pathelement path="${basedir}/src/"/>
                <pathelement path="${basedir}/l10n/"/>
            </classpath>
        </java>
    </target>

    <target name="apidoc" description="Generate javadocs for Megamek" >
        <mkdir dir="${dir.apidoc}" />
        <javadoc classpath="${basedir}" destdir="${dir.apidoc}" package="yes" packagenames="megamek.*"
                 sourcepath="${dir.src.java}" windowtitle="MegaMek API" />
    </target>

    <!-- compile unit tests from source -->
    <target name="compile.test" depends="compile" unless="skip.tests" >
        <mkdir dir="${dir.build.test}" />
        <javac srcdir="${dir.src.test}" destdir="${dir.build.test}" includeantruntime="false" debug="true">
            <classpath>
                <pathelement path="${dir.build}" />
                <fileset dir="${dir.lib.test}" includes="*.jar" />
            </classpath>
        </javac>
    </target>

    <!-- clean teststaging and testreport directories -->
    <target name="-pretest">
        <delete dir="${dir.build.teststaging}"/>
        <delete dir="${dir.build.testreport}"/>
    </target>

    <!-- Runs all unit tests
         Loads test reports into teststaging directory
         Halts build upon error -->
    <target name="test.halting" depends="compile.test, -pretest">
        <mkdir dir="${dir.build.teststaging}"/>
        <mkdir dir="${dir.build.testreport}"/>
        <junit fork="true" maxmemory="256m" showoutput="true" 
               printsummary="true" forkmode="once" haltonfailure="true"
               haltonerror="true" failureproperty="tests.failed" dir="${basedir}">
            <classpath>
                <pathelement path="${dir.build}:${dir.build.test}" />
                <fileset dir="${dir.lib.java}" includes="*.jar" />
                <fileset dir="${dir.lib.test}" includes="*.jar" />
            </classpath>
            <batchtest fork="true" todir="${dir.build.teststaging}">
                <formatter type="xml" />
                <fileset dir="${dir.build.test}">
                    <include name="**/*Test.class"/>
                    <include name="**/*Tests.class"/>
                </fileset>
            </batchtest>
        </junit>
    </target>

    <!-- Run build-halting test suite, compose results -->
    <target name="test.report" depends="test.halting">
        <junitreport todir="${dir.build.testreport}">
            <fileset dir="${dir.build.teststaging}" includes="TEST-*.xml" />
        </junitreport>
    </target>

    <target name="jar" depends="compile" description="Generate JAR File from compiled sources">
        <jar basedir="${dir.build}" jarfile="${basedir}/${jarfile}">
            <fileset dir="${dir.prop}" includes="**/*.properties"/>
            <fileset dir="${dir.src.java}" includes="**/*.properties"/>
            <manifest>
                <attribute name="Built-By" value="${user.name}"/>
                <attribute name="Class-Path" value=". ${jarclasspath}"/>
                <attribute name="Main-Class" value="${jarmainclass}"/>
            </manifest>
        </jar>
    </target>

    <target name="clean" description="Remove all compiled and generated files" >
        <delete dir="${dir.build}" />
        <delete dir="${dir.apidoc}" />
        <delete dir="${dir.log}" />
        <delete file="${jarfile}" />
        <delete>
            <!-- ant should have no purview over (generated?) .zip files... -->
            <fileset dir="${basedir}" includes="**/megamek-*.zip" />
        </delete>
        <delete file="${dir.data}/mechfiles/units.cache" />
        <!-- 
        <delete>
            <fileset dir="${dir.data}/mechfiles" includes="units.cache" />
        </delete>
        -->
    </target>

    <target name="all" depends="clean, test.report, jar"
            description="Clean, compile, run tests, and build a jar" />

    <target name="test" depends="compile.test, -pretest" description="Run tests; configure with -Dtests=pattern (where pattern defaults to *Test)" >
        <property name="tests" value="*Test" />
        <property name="test.quiet" value="false" />
        <mkdir dir="${dir.build.testreport}" />
        <junit maxmemory="256m" haltonfailure="false"
                fork="true" forkmode="once">
            <classpath>
                <pathelement path="${dir.build}:${dir.build.test}" />
                <fileset dir="${dir.lib.java}" includes="*.jar" />
                <fileset dir="${dir.lib.test}" includes="*.jar" />
            </classpath>
            <formatter type="brief" usefile="false" unless="${test.quiet}" />
            <batchtest todir="${dir.build.testreport}" >
                <formatter type="xml" />
                <fileset dir="${dir.src.test}" includes="**/${tests}.java" />
            </batchtest>
        </junit>
    </target>

</project>
