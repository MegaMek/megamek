This is an information file for the refactor_weapons branch.

This branch is for the purpose of developing a dynamic set of weapon types.
Look at megamek.common.Weapon, megamek.common.AttackHandler.  The idea there
is that each weapon (say, an IS Medium Laser) will have its own class, in this 
case, ISMedLaser.  It'll extend from LaserType, which extends from EnergyType,
which begat whatever, you get the idea.  When you fire the gun, its fire method
will get called.  Said method will return a private class which implements
AttackHandler.  ***THIS METHOD WILL DO EVERYTHING W/R/T DEALING WITH THE ACTUAL
ATTACK.***  This branch, in other words, completely deprecates 
Server#resolveWeaponAttack, among other functions.  Check out my new versions of
Server#resolveOnlyWeaponAttacks and Server#handleAttacks to get the idea.

Some notes:

Yes, every weapon will have an individual class.  It's how I'm implementing it,
I think it's simpler (if more code.)

WeaponType will remain in use (Weapon extends from it, note) but basically just as
an information source.  In other words, WeaponType is what you use to show in your
GUI what the damage is, or to check the flags.  It's definitely required of the
weapon class constructor to correctly set the flags/data members it inherits from
WeaponType.

Ammo is being completely left alone.  It'll be handled within weapon#fire, where
any special ammos will be noted, and (my interpretation) a different AttackHandler
will be created.  (I.E., a simple case, SRM weapons will have both a SRMAttackHandler
and a SRMInfernoAttackHandler; the correct one will be returned as the fire method
decides.

Loading entities is gonna be a bit difficult. Note, each medium laser in existence
in a game are *different* instances.  There's only a few weapons for which this 
matters (artillery and adjusted fire, basically) but it's important.  So, we need
to think about how to work the loading.

As you may see if you look around, since we're using differently typed weapons,
don't say mounted.getType() instanceof WeaponType.  instead, use mounted.isWeapon().
'Mmkay?

Damage resolution is going to be the same--i.e. attackHandler will determine hits,
then pass the HitData onto Server#damageEntity

What's been done:
Gone through the code and *basically* placed the right calls in the right places.
I.E., fixed up the server functions and replaced calls in rest of code where needed.
Probably *very* buggy and incomplete.

Created the base classes needed (weapon, AttackHandler)

What's not been done.
Created all the actual weapon hierarchy.  BTW, if you haven't figured it out already
megamek.common.equip is basically useless to us.  This is where I'd most appreciate
help, if nothing else it's gonna be a lot of typing.

Figured out how to load entities.

Any questions, drop a post in the Dev forum or shoot me an email.  
~Andrew Hunter.
