<?xml version="1.0"?>
<!-- This is an ant build file. See: "http://jakarta.apache.org/ant" -->
<!-- To see userlevel commands and their descpription type 'ant -projecthelp' -->
<!-- from a command prompt where this file is located -->

<project default="all" name="MegaMek" basedir=".">
  <!-- Global properties for this build -->
  
  <property name="srcdir" value="src"/>
  <property name="propdir" value="l10n"/>
  <property name="confdir" value="mmconf"/>
  <property name="logdir" value="logs"/>
  <property name="builddir" value="classes"/>
  <property name="libdir" value="lib"/>
  <property name="datadir" value="data"/>
  <property name="apidocdir" value="apidocs"/>
  <property name="docdir" value="docs"/>
  <property name="svndir" value="svndev"/>

  <import file="local.xml" optional="true"/>

  <!-- same as builddir but under svn -->
  <property name="svnbuilddir" value="${svndir}/${builddir}"/>
  
  <!-- svnroot used for svn authentification --> 
  <property name="svnroot" value="https://svn.sourceforge.net/svnroot/megamek/branches/rel-0-32-0"/>
  
  <property name="timestampfile" value="${logdir}/timestamp"/>
  <property name="TinyXMLsrc" value="TinyXML07-src.zip" />
  
  <!-- Name of the target jarfile and the class containing the main-Method -->
  <property name="jarfile" value="MegaMek.jar"/>
  <property name="jarmainclass" value="megamek.MegaMek"/>
  
  <!-- This is the relative path to the 'data' directory -->
  <property name="dataclasspath" value="."/>

  <!-- Build the list of the lib/*.jar files to be included in the "Class-Path" attribute of the jar's manifest dynamically.  -->
  <pathconvert pathsep=" " property="jarclasspath">
     <path>
        <!-- We'll include the jars in the "lib" directory -->
        <fileset dir="lib/">
           <include name="*.jar"/>
        </fileset>
     </path>
     <mapper>
        <chainedmapper>
          <flattenmapper/>
          <globmapper from="*" to="lib/*"/>
        </chainedmapper>
     </mapper>
  </pathconvert>

  <!-- initializes system before build -->
  <target name="init">
     <!-- Create the time stamp -->
     <tstamp/>

     <!-- Ensure that the build directory exists. -->
     <mkdir dir="${builddir}"/>
  </target>

  <target name="compile" depends="init" description="Compile java sources into class files">
    <!-- compile -->
    <javac debug="true" debuglevel="lines,source"
         target="1.5" source="1.5"
         destdir="${builddir}" srcdir="${srcdir}" >
        <classpath>
            <pathelement location="${basedir}"/>
            <fileset dir="${libdir}" includes="*.jar"/>
         </classpath>
    </javac>

    <!-- Ensure that the log directory exists. -->
    <mkdir dir="${logdir}"/>
    <touch file="${timestampfile}"/>
  </target>

  <!-- This task converts java 1.5 class files to 1.4 class files. -->
  <!-- Note that you should run the jar task after this task is done. -->
  <!-- Requires the file local.xml to be present with a property called -->
  <!-- retroweaverdir defined set to the base directory where you unzipped -->
  <!-- retroweaver-all.jar to.  An example local.xml is provided below -->
  <!-- (note that all less than and greater than characters are shown as -->
  <!-- square brackets) -->
  <!-- Example local.xml file: -->
  <!-- [project name="local"]                                    -->
  <!--    [property name="tooldir" value="c:\Development"/]      -->
  <!-- [/project]                                                -->
  <target name="weave" depends="compile" >
     <echo message="Applying Retroweaver to class files..."/>
     <java classname="com.rc.retroweaver.Weaver">
        <arg line="-source ${builddir}"/>
        <classpath>
           <pathelement location="${retroweaverdir}/release/retroweaver-1.2.5.jar"/>
           <fileset dir="${retroweaverdir}/lib" includes="*.jar"/>
        </classpath>
     </java>
  </target>

  <target name="jar" depends="compile" description="Generates JAR File from compiled sources">
     <!-- collects all files from the ${builddir} (classes) and generates the jar file in ${basedir} -->  
     <jar basedir="${builddir}" jarfile="${basedir}/${jarfile}">
        <fileset dir="${propdir}" includes="**/*.properties"/>
        <fileset dir="${srcdir}" includes="**/*.properties"/>
        <manifest>
            <attribute name="Built-By" value="${user.name}"/>
            <attribute name="Class-Path" value=". ${jarclasspath}"/>
            <attribute name="Main-Class" value="${jarmainclass}"/>
        </manifest>
    </jar>
  </target>

  <target name="run" depends="compile" >
    <echo message="Running MegaMek from build directory: ${builddir}"/>
     <java classname="megamek.MegaMek" fork="true">
        <classpath>
           <pathelement path="${basedir}"/>
           <pathelement path="${builddir}"/>
           <fileset dir="${libdir}" includes="*.jar"/>
        </classpath>
     </java>
  </target>

  <!-- generates MegaMek API Doc in ${apidocdir} -->
  <target name="apidoc">
     <mkdir dir="${apidocdir}"/>
     <javadoc classpath="${basedir}" destdir="${apidocdir}" package="yes" packagenames="megamek.*" sourcepath="${srcdir}" windowtitle="MegaMek API"/>
  </target>
  
  <target name="clean" description="Remove all compiled and generated files">
    <!-- Delete the ${build} directory tree -->
    <delete dir="${builddir}"/>
    <delete dir="${apidocdir}"/>
    <delete file="${timestampfile}"/>
    <delete file="${jarfile}"/>
    <delete>
        <fileset dir="${basedir}">
           <include name="**/megamek-*.zip"/>
        </fileset>
    </delete>
  </target>

  <target depends="clean, compile, jar" name="all"/>
  <target depends="clean, compile, weave, jar" name="full"/>

  <!-- generates the updated code & media package and the regular package (containing both) -->
  <target name="packageAll" description="Generates 3 packages: code, media, code+media" depends="svndev-get, svndev-build, packageMedia, packageCode, svndev-package">
  </target>

  <target name="packageCode" description="Generates code package only" depends="svndev-get, svndev-build">
    <zip basedir="${svndir}" zipfile="${basedir}/megamek-dev-upgrade-${DSTAMP}.zip" includes="${jarfile} docs/history.txt license.txt MegaMek.exe startup.sh mmconf/MegaMek.bat"/>
  </target>

  <target name="packageMedia" description="Generates media package only" depends="svndev-get">
    <zip basedir="${svndir}" zipfile="${basedir}/megamek-dev-media-${DSTAMP}.zip" includes="${datadir}/ ${confdir}/ ${docdir}/ *.txt stats.pl" excludes="*.jar"/>
  </target>

  <target name="updateInstalledCode" description="Compiles, jars and installs the newest sources from svn." depends="svndev-init"> 
    <!-- get the code -->
    <antcall target="svndev-clean"/>
  	<svn>
  		<checkout url="${svnroot}/${srcdir}" destPath="${svndir}/${srcdir}"/>
  		<checkout url="${svnroot}/${propdir}" destPath="${svndir}/${propdir}"/>
  	    <!-- downloading precompiled libraries that are needed for a successful build -->
  		<checkout url="${svnroot}/${libdir}" destPath="${svndir}/${libdir}"/>
	</svn>
    
    <antcall target="svndev-build"/>
    
    <!-- Copy new MegaMek.jar and potentially updated libraries into user dir -->
    <copy todir="${basedir}" overwrite="true">
        <fileset dir="${svndir}" includes="*.jar"/>
    </copy>
    <echo message="New '${jarfile}' has been build and installed"/>
  </target>
  
  <target name="updateInstalledMedia" description="Gets the newest datafiles from svn">
    <!-- data files will be directly downloaded over existing ones -->
  	<svn>
  		<checkout url="${svnroot}/${datadir}" destPath="${svndir}/${datadir}"/>
  	</svn>
    
    <echo message="datafiles updated."/>
  </target>
  
  <target name="svndev-init">
    <tstamp/>
    <mkdir dir="${svndir}"/>
  </target>

  <!-- following svndev-* tasks get, build & package the current version from svn -->
  <target name="svndev-get" depends="svndev-init">
  	<svn>
  		<checkout url="${svnroot}" destPath="${svndir}"/>
  	</svn>
  </target>

  <target name="svndev-build" depends="svndev-init">
    <mkdir dir="${svnbuilddir}"/>

    <!-- compile -->
    <echo message="building MegaMek from svn sources"/>
    <javac debug="true" debuglevel="lines,source"
         target="1.5" source="1.5"
         destdir="${svnbuilddir}" srcdir="${svndir}/${srcdir}">
        <classpath> 
           <pathelement location="${svndir}"/>
           <fileset dir="${svndir}/${libdir}" includes="*.jar"/>
        </classpath>
    </javac>
    
    <!-- weave (maintain 1.4 compatability) -->
     <echo message="Applying Retroweaver to class files..."/>
     <java classname="com.rc.retroweaver.Weaver">
        <arg line="-source ${svnbuilddir}"/>
        <classpath>
           <pathelement location="${retroweaverdir}/release/retroweaver-1.2.5.jar"/>
           <fileset dir="${retroweaverdir}/lib" includes="*.jar"/>
        </classpath>
     </java>

    <!-- jar -->
    <jar basedir="${svnbuilddir}" jarfile="${svndir}/${jarfile}">
        <fileset dir="${svndir}/${propdir}" includes="**/*.properties"/>
    	<fileset dir="${svndir}/${srcdir}" includes="**/*.properties"/>
        <manifest>
            <attribute name="Built-By" value="${user.name}"/>
            <attribute name="Class-Path" value=". ${jarclasspath}"/>
            <attribute name="Main-Class" value="${jarmainclass}"/>
        </manifest>
    </jar>
    
    <!-- Ensure that the log directory exists. -->
    <mkdir dir="${svndir}/${logdir}"/>
    <touch file="${svndir}/${timestampfile}"/>
  </target>

  <target name="svndev-package" depends="svndev-build">
    <delete file="${svndir}/${TinyXMLsrc}"/>
    <!-- zip file generation from svn sources -->
    <!-- keep in mind that directory references for 'excludes' are -->
    <!-- relative to the zip-tasks basedir but 'zipfile' uses the -->
    <!-- absolute (project) ${basedir} -->
    <zip zipfile="${basedir}/megamek-dev-svn-${DSTAMP}.zip" basedir="${svndir}" excludes="${builddir}/"/>
  </target>
  
  <target name="svndev-clean">
    <delete dir="${svnbuilddir}"/>
  </target>

  <target name="svndev" depends="svndev-init, svndev-get, svndev-build, svndev-package"/>
  
  <target name="cleansvn" description="removes everything inside 'svndev' and the dir itself">
    <delete dir="${svndir}/"/>
  </target>
</project>
