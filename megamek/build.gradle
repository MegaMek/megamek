import java.time.LocalDateTime

plugins {
    id 'application'
    id 'checkstyle'
    id 'com.palantir.git-version' version '3.1.0'
    id 'edu.sc.seis.launch4j' version '3.0.6'
    id "io.sentry.jvm.gradle" version '5.1.0'
    id 'jacoco'
    id 'java'
    id 'org.ec4j.editorconfig' version '0.1.0'
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

sourceSets {
    main {
        java {
            srcDirs = ['src']
        }
        resources {
            srcDirs = ['i18n', 'resources']
        }
    }
    test {
        java {
            srcDirs = ['unittests']
        }
        resources {
            srcDirs = ['testresources']
        }
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'com.fasterxml.jackson.core:jackson-core:2.17.2'
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.17.2'
    implementation 'com.formdev:flatlaf:3.5.1'
    implementation 'com.formdev:flatlaf-extras:3.5.1'
    implementation 'com.sun.mail:jakarta.mail:2.0.1'
    implementation 'com.thoughtworks.xstream:xstream:1.4.20'
    implementation 'jakarta.xml.bind:jakarta.xml.bind-api:4.0.2'
    implementation 'org.apache.commons:commons-collections4:4.5.0-M2'
    implementation 'org.apache.commons:commons-lang3:3.17.0'
    implementation 'org.apache.commons:commons-text:1.12.0'
    implementation 'org.apache.logging.log4j:log4j-api:2.24.0'
    implementation 'org.apache.logging.log4j:log4j-core:2.24.0'
    implementation 'org.freemarker:freemarker:2.3.33'
    implementation 'org.commonmark:commonmark:0.22.0'
    implementation 'com.squareup:gifencoder:0.10.1'

    runtimeOnly 'org.glassfish.jaxb:jaxb-runtime:4.0.5'

    testRuntimeOnly 'org.junit.platform:junit-platform-launcher:1.11.0'

    testImplementation 'org.junit.jupiter:junit-jupiter:5.11.0'
    testImplementation 'org.mockito:mockito-core:5.13.0'
}

application {
    mainClass = 'megamek.MegaMek'
}

ext {
    mmJvmOptions = [
        '-Xmx4096m',
        '--add-opens',
        'java.base/java.util=ALL-UNNAMED',
        '--add-opens',
        'java.base/java.util.concurrent=ALL-UNNAMED',
        '-Dsun.awt.disablegrab=true'
    ]
    data = 'data'
    unitFiles = "${data}/mekfiles"
    rats = "${data}/rat"
    docs = "docs"
    lib = "lib"
    log = "logs"
    mmconf = "mmconf"
    userdata = 'userdata'
    fileStagingDir = "${buildDir}/files"
    atlasedImages = "${fileStagingDir}/atlasedImages.txt"
}

checkstyle {
    toolVersion '10.18.1'
    configFile file("config/checkstyle/checkstyle.xml")
    ignoreFailures false
}

run {
    jvmArgs = mmJvmOptions
}

jar {
    archiveFileName = 'MegaMek.jar'

    manifest {
        attributes "Main-Class" : application.mainClass
        attributes "Class-Path" : project.sourceSets.main.runtimeClasspath.files
            .findAll { it.name.endsWith(".jar") }.collect { "${lib}/${it.name}" }.join(' ')
        attributes "Add-Opens" : 'java.base/java.util java.base/java.util.concurrent'
        attributes "Build-Date" : LocalDateTime.now()
    }
}

task generateDynamicFiles() {
    doLast {
        new File("${projectDir}/docs/mm-revision.txt").text = versionDetails().gitHashFull
        new File("${projectDir}/MegaMek.l4j.ini").text = """# Launch4j runtime config
# you can add arguments here that will be processed by the JVM at runtime
${project.ext.mmJvmOptions.join('\n')}
"""
    }
}

task officialUnitList(type: JavaExec, dependsOn: jar) {
    description = 'Compiles a list of all units that come from official sources and saves it in the docs folder.'
    group = 'build'
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'megamek.MegaMek'
    args = ['-oul', "${projectDir}/docs/OfficialUnitList.txt"]
}

task equipmentList(type: JavaExec, dependsOn: jar) {
    description = 'Generate current equipment.txt'
    group = 'build'
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'megamek.MegaMek'
    args = [ '-eqdb', "${projectDir}/docs/equipment.txt" ]
}

task copyFiles(type: Copy) {
    description = 'Stages files that are to be copied into the distribution.'
    group = 'build'

    dependsOn officialUnitList
    dependsOn equipmentList
    dependsOn generateDynamicFiles

    from projectDir
    include "${data}/**"
    include "${docs}/**"
    include "${mmconf}/**"
    include "SubmitBug.html"
    include "license.txt"
    include "sentry.properties"
    include "*.ini"
    exclude "**/*.psd"

    // No need to copy the files that are going to be zipped
    exclude { it.file.isDirectory() && (it.file in file(unitFiles).listFiles()) }

    // User Config Files
    exclude "${mmconf}/clientsettings.xml"
    exclude "${mmconf}/gameoptions.xml"
    exclude "${mmconf}/megameklab.properties"
    exclude "${mmconf}/megameklab.properties.bak"
    exclude "${mmconf}/mhq.preferences"
    exclude "${mmconf}/mm.preferences"
    exclude "${mmconf}/mml.preferences"

    exclude "${rats}/**"
    include "${userdata}/"

    into fileStagingDir
}

task createImageAtlases(type: JavaExec, dependsOn: copyFiles) {
    description = 'Combines individual image files into a set of image atlases.'
    classpath = sourceSets.main.runtimeClasspath
    mainClass = "megamek.utilities.CreateImageAtlases"
    workingDir = file(fileStagingDir)
}

task deleteAtlasedImages(dependsOn: createImageAtlases) {
    description = 'Removes images from the staging directory that have been incorporated into atlases.'
    doLast {
        if (file(atlasedImages).exists()) {
            ant.delete dir: fileStagingDir, includesfile: atlasedImages
            ant.delete file: atlasedImages
        }
    }
}

task unitFilesZip (dependsOn: copyFiles) {
    description = 'Creates zip archives of all the unit file folders.'
    file(unitFiles).eachDir {subDir ->
        dependsOn tasks.create("${name}${subDir.name}", Zip) {
            from subDir
            archiveFileName = "${subDir.name}.zip"
            destinationDirectory = file("${fileStagingDir}/${unitFiles}")
        }
    }
    inputs.dir "${projectDir}/${unitFiles}"
    outputs.dir "${fileStagingDir}/${unitFiles}"
}

task ratZip (type: Zip) {
    description = 'Creates a zip archive of all the random assignment tables.'
    from rats
    archiveFileName = "rat_default.zip"
    destinationDirectory = file("${fileStagingDir}/${rats}")
    doFirst {
        mkdir "${fileStagingDir}/${rats}"
    }
    inputs.dir "${projectDir}/${rats}"
    outputs.dir "${fileStagingDir}/${rats}"
}

task stageFiles {
    description = 'Process data files to be included in distribution'
    group = 'distribution'
    dependsOn unitFilesZip
    dependsOn ratZip
    dependsOn deleteAtlasedImages

    doLast {
        mkdir "${fileStagingDir}/${log}"
    }
}

task createStartScripts (type: CreateStartScripts) {
    description = 'Create shell script for generic distribution.'
    applicationName = 'MegaMek'
    mainClass = application.mainClass
    outputDir = startScripts.outputDir
    classpath = jar.outputs.files + files(project.sourceSets.main.runtimeClasspath.files)
            .filter { it.name.endsWith(".jar") }
    defaultJvmOpts = project.ext.mmJvmOptions
}

distributions {
    main {
        distributionBaseName = 'MegaMek'
        contents {
            from ("${buildDir}/launch4j") {
                include '*.exe'
            }
            from(jar) {
                into "${lib}"
            }
            from("${projectDir}/scripts") {
                include "shell.sh"
                rename "shell.sh", "MegaMek.sh"
            }
            from(jar)
            from fileStagingDir
            from (project.sourceSets.main.runtimeClasspath.files
                    .findAll { it.name.endsWith(".jar") }) {
                into "${lib}"
            }
            duplicatesStrategy 'exclude'
        }
    }
}

launch4j {
    description = 'Create Windows executable for Megamek'
    mainClassName = application.mainClass
    outfile = 'MegaMek.exe'
    icon = "${projectDir}/data/images/misc/megamek.ico"
    jarTask = project.tasks.jar
    windowTitle = 'MegaMek'
    internalName = 'MegaMek'
    downloadUrl = 'https://github.com/MegaMek/megamek/wiki/Updating-to-Adoptium-(Eclipse-Temurin-Open-Source-Java)'
    supportUrl = 'https://megamek.org'
    copyright = '2024 MegaMek Development Team.'
    trademarks = 'MechWarrior, BattleMech, `Mech and Aerotech - The The Topps Company, Inc. Catalyst Game Labs - InMediaRes Productions, LLC.'
    companyName = "MegaMek Development Team"
    jreMinVersion = '17'
    dontWrapJar = true
    messagesJreVersionError = 'We require a Java Runtime of version 17 or higher installed. https://github.com/MegaMek/megamek/wiki/Updating-to-Adoptium-(Eclipse-Temurin-Open-Source-Java)'
    messagesJreNotFoundError = 'Go here for instructions on installing the correct version of Java: https://github.com/MegaMek/megamek/wiki/Updating-to-Adoptium-(Eclipse-Temurin-Open-Source-Java)'
}

tasks.register("packagePrepWork") {
    description = 'General Catch All for all distributions'
    dependsOn stageFiles
    dependsOn startScripts
    dependsOn createStartScripts
    dependsOn copyFiles
    dependsOn createImageAtlases
    dependsOn equipmentList
    dependsOn officialUnitList
    dependsOn ratZip
    dependsOn createAllExecutables
}

distZip {
    description = 'Creates a Zip file for distribution'
    enabled = false
    dependsOn packagePrepWork
}

distTar {
    description = 'Creates a gziped tar ball for distribution'
    dependsOn packagePrepWork
    archiveExtension = 'tar.gz'
    compression = Compression.GZIP
}

// The distribution plugin adds the distro packages to the assemble task, which causes the build task
// to run all the packaging tasks.
task assemble(overwrite: true) {
    dependsOn jar
}

// Replace the assembleDist task created by the distributions plugin to create the packages we want to
task assembleDist(overwrite: true) {
    description = 'Build unix, Windows, and source packages'
    group = 'distribution'
    dependsOn test
    dependsOn distTar
    dependsOn distZip
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
    jvmArgs = mmJvmOptions
}

jacocoTestReport {
    dependsOn(test)
    reports {
        xml.required = true
        html.required = true
    }
}

// These are utility classes for all of the classes with the src/utilities folder.

task alphaStrikeMassConvert(type: JavaExec, dependsOn: jar) {
    description = 'Outputs the Alpha Strike conversion of all units'
    group = 'utility'
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'megamek.utilities.AlphaStrikeMassConvert'
}

task boardsTagger(type: JavaExec, dependsOn: jar) {
    description = 'Tags all boards'
    group = 'utility'
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'megamek.utilities.BoardsTagger'
}

task boardsValidator(type: JavaExec, dependsOn: jar) {
    description = 'Validates all boards'
    group = 'utility'
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'megamek.utilities.BoardsValidator'
}

task filteredUnitListTool(type: JavaExec, dependsOn: jar) {
    description = 'Filter Unit List Tool'
    group = 'utility'
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'megamek.utilities.FilteredUnitListTool'
}

task gifWriter(type: JavaExec, dependsOn: jar) {
    description = 'Generate a GIF from a game summary'
    group = 'utility'
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'megamek.utilities.GifWriter'
    args project.hasProperty('gifGameSummary') ? project.gifGameSummary.tokenize(' ') : []
}

task princessFineTuning(type: JavaExec, dependsOn: jar) {
    description = 'Calculates the optimal Princess fine tuning for a unit'
    group = 'utility'
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'megamek.utilities.PrincessFineTuning'
    args project.hasProperty('aiArgs') ? project.aiArgs.tokenize(' ') : []
}

task entityVerifier(type: JavaExec, dependsOn: jar) {
    description = 'Entity Verifier'
    group = 'utility'
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'megamek.common.verifier.EntityVerifier'
}

task iconTest(type: JavaExec, dependsOn: jar) {
    description = 'Icon Tool'
    group = 'utility'
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'megamek.utilities.IconTest'
}

task mechCacheCSVTool(type: JavaExec, dependsOn: jar) {
    description = 'Icon Tool'
    group = 'utility'
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'megamek.utilities.MekCacheCSVTool'
}

task nameChangesValidator(type: JavaExec, dependsOn: jar) {
    description = 'Checks for issues related to name changes.'
    group = 'utility'
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'megamek.utilities.NameChangesValidator'
}

task ratGeneratorEditor(type: JavaExec, dependsOn: copyFiles) {
    description = 'Checks for issues related to name changes.'
    group = 'utility'
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'megamek.utilities.RATGeneratorEditor'
}

task techLevelCompareTool(type: JavaExec, dependsOn: jar) {
    description = 'Tech Level Comparison Tool'
    group = 'utility'
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'megamek.utilities.TechLevelCompareTool'
}

task unitFileMigrationTool(type: JavaExec, dependsOn: jar) {
    description = 'Tech Level Comparison Tool'
    group = 'utility'
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'megamek.utilities.UnitFileMigrationTool'
}

task testAi(type: JavaExec, dependsOn: jar) {
    description = 'Test AI'
    group = 'utility'
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'megamek.utilities.QuickGameRunner'
    args(project.hasProperty("testAiArgs") ? project.property("testAiArgs").split(' ') : "")

    jvmArgs = mmJvmOptions
}

tasks.withType(Checkstyle) {
    minHeapSize = "200m"
    maxHeapSize = "1g"
    reports {
        xml.required = false
        html.required = true
    }
}
