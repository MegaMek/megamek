plugins {
    id 'application'
    id 'maven-publish'
    id 'edu.sc.seis.launch4j' version '2.5.1'
}

sourceSets {
    main {
        java {
            srcDirs = ['src']
        }
        resources {
            srcDirs = ['i18n', 'resources']
        }
    }
    test {
        java {
            srcDirs = ['unittests']
        }
        resources {
            srcDirs = ['testresources']
        }
    }
}

dependencies {
    implementation 'com.fasterxml.jackson.core:jackson-core:2.13.1'
    implementation 'com.formdev:flatlaf:1.6.5'
    implementation 'com.github.ikkisoft:SerialKiller:master-SNAPSHOT'
    implementation 'com.sun.mail:jakarta.mail:2.0.1'
    implementation 'com.thoughtworks.xstream:xstream:1.4.14'
    implementation 'jakarta.xml.bind:jakarta.xml.bind-api:2.3.2'
    implementation 'org.apache.commons:commons-text:1.9'
    implementation 'org.apache.logging.log4j:log4j-core:2.17.1'
    implementation 'org.freemarker:freemarker:2.3.31'

    runtimeOnly 'org.glassfish.jaxb:jaxb-runtime:2.3.2'

    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.mockito:mockito-core:4.2.0'
}

mainClassName = 'megamek.MegaMek'

ext {
    jvmOptions = ['-Xmx2048m']
    userdata = "userdata"
    data = "data"
    conf = "mmconf"
    log = "logs"
    docs = "docs"
    lib = "lib"
    distributionDir = "${buildDir}/distributions"
    fileStagingDir = "${buildDir}/files"
    repoDir = "${buildDir}/repo"
    atlasedImages = "${fileStagingDir}/atlasedImages.txt"
    unitFiles = "${data}/mechfiles"
    rats = "${data}/rat"
    mavenPublishDir = "${buildDir}/mavenrepo"
    scriptsDir = "${projectDir}/scripts"
    scriptTemplate = "${scriptsDir}/startScriptTemplate.txt"
}

jar {
    archiveFileName = 'MegaMek.jar'
    manifest {
        attributes "Main-Class": mainClassName
        attributes 'Class-Path' : project.sourceSets.main.runtimeClasspath.files
            .findAll { it.name.endsWith(".jar") }.collect { "${lib}/${it.name}" }.join(' ')
    }
}

task officialUnitList(type: JavaExec, dependsOn: jar) {
    description = 'Compiles a list of all units that come from official sources and saves it in the docs folder.'
    group = 'build'
    classpath = sourceSets.main.runtimeClasspath
    main = 'megamek.MegaMek'
    args '-oul'
    inputs.dir "${projectDir}/${unitFiles}"
    outputs.file "${fileStagingDir}/docs/OfficialUnitList.txt"
}

task equipmentList(type: JavaExec, dependsOn: jar) {
    description = 'Generate current equipment.txt'
    group = 'build'
    classpath = sourceSets.main.runtimeClasspath
    main = 'megamek.MegaMek'
    args = [ '-eqdb', 'docs/equipment.txt' ]
    inputs.files sourceSets.main.allJava
    outputs.file "${fileStagingDir}/docs/equipment.txt"
}

task copyFiles(type: Copy) {
    description = 'Stages files that are to be copied into the distribution.'
    
    dependsOn officialUnitList
    dependsOn equipmentList
    
    from projectDir
    
    include "${data}/**"
    include "${conf}/**"
    include "${docs}/**"
    include "${rootDir}/license.txt"
    exclude "**/*.psd"
    // No need to copy the files that are going to be zipped
    exclude { it.file.isDirectory() && (it.file in file(unitFiles).listFiles()) }
    exclude "${rats}/**"
    include "${userdata}/"
    
    into fileStagingDir
    
    inputs.dir "${data}"
    inputs.dir "${conf}"
    inputs.dir "${docs}"
    inputs.file "${rootDir}/license.txt"
    outputs.dir fileStagingDir
}

task createImageAtlases(type: JavaExec, dependsOn: copyFiles) {
    description = 'Combines individual image files into a set of image atlases.'
    classpath = sourceSets.main.runtimeClasspath
    main = "megamek.utils.CreateImageAtlases"
    workingDir = file(fileStagingDir)
    inputs.dir "${projectDir}/${data}/images/units"
    outputs.dir "${fileStagingDir}/${data}/images/units"
}

task deleteAtlasedImages(dependsOn: createImageAtlases) {
    description = 'Removes images from the staging directory that have been incorporated into atlases.'
    doLast {
        if (file(atlasedImages).exists()) {
            ant.delete dir: fileStagingDir, includesfile: atlasedImages
            ant.delete file: atlasedImages
        }
    }
}

task unitFilesZip (dependsOn: copyFiles) {
    description = 'Creates zip archives of all the unit file folders.'
    file(unitFiles).eachDir {subDir ->
        dependsOn tasks.create("${name}${subDir.name}", Zip) {
            from subDir
            archiveFileName = "${subDir.name}.zip"
            destinationDirectory = file("${fileStagingDir}/${unitFiles}")
        }
    }
    inputs.dir "${projectDir}/${unitFiles}"
    outputs.dir "${fileStagingDir}/${unitFiles}"
}

task ratZip (type: Zip) {
    description = 'Creates a zip archive of all the random assignment tables.'
    from rats
    archiveFileName = "rat_default.zip"
    destinationDirectory = file("${fileStagingDir}/${rats}")
    doFirst {
        mkdir "${fileStagingDir}/${rats}"
    }
    inputs.dir "${projectDir}/${rats}"
    outputs.dir "${fileStagingDir}/${rats}"
}

task stageFiles {
    description = 'Process data files to be included in distribution'
    group = 'distribution'
    dependsOn unitFilesZip
    dependsOn ratZip
    dependsOn deleteAtlasedImages
    
    doLast {
        mkdir "${fileStagingDir}/${log}"
        ant.touch(file: "${fileStagingDir}/${log}/timestamp")
    }
}

task createStartScripts (type: CreateStartScripts) {
    description = 'Create shell script for generic distribution.'
    applicationName = 'startup'
    mainClassName = project.mainClassName
    outputDir = startScripts.outputDir
    classpath = jar.outputs.files + files(project.sourceSets.main.runtimeClasspath.files)
            .filter { it.name.endsWith(".jar") }
    defaultJvmOpts = project.ext.jvmOptions
    // The default template assumes the start script is in a subdirectory and always
    // sets APP_HOME to the parent directory of the one containing the script.
    // So we provide a modified template.
    unixStartScriptGenerator.template = resources.text.fromFile(scriptTemplate)
    doLast {
        // The start script assumes all the files on the classpath will be in the lib directory.
        unixScript.text = unixScript.text.replace('lib/MegaMek', 'MegaMek')
        windowsScript.text = windowsScript.text.replace('lib\\MegaMek', 'MegaMek')
        // The Windows script just has a single line that needs to be changed to put the script in the root,
        // so we'll do a simple replace
        windowsScript.text = windowsScript.text.replace('set APP_HOME=%DIRNAME%..', '')
    }
}

distributions {
    // Creates tasks which package distribution with MM jar and startup script in root directory
    unix {
        distributionBaseName = 'megamek'
        contents {
            from fileStagingDir
            from(createStartScripts.outputs.files) {
                include "startup*"
            }
            from(jar)
            from (project.sourceSets.main.runtimeClasspath.files
                    .findAll { it.name.endsWith(".jar") }) {
                into "${lib}"
            }
        }
    }
    // Creates tasks which package distribution with MM jar wrapped in Windows executable
    windows {
        contents {
            from ("${buildDir}/launch4j") {
                include '*.exe'
                include '*.ini'
            }
            from fileStagingDir
            from (project.sourceSets.main.runtimeClasspath.files
                    .findAll { it.name.endsWith(".jar") }) {
                into "${lib}"
            }
        }
    }
}

createExe {
    description = 'Create Windows executable that wraps MM jar'
    mainClassName = project.mainClassName
    outfile = 'MegaMek.exe'
    icon = "${projectDir}/data/images/misc/megamek.ico"
    def inifile = outfile.replace('.exe', '.l4j.ini')
    jar = "${project.tasks.getByName("jar").archiveFile.get()}"
    inputs.file  jar
    outputs.file "${buildDir}/launch4j/${outfile}"
    outputs.file "${buildDir}/launch4j/${inifile}"
    doLast {
        new File("${buildDir}/${outputDir}/${inifile}").text = """# Launch4j runtime config
# you can add arguments here that will be processed by the JVM at runtime
${project.ext.jvmOptions.join('\n')}
"""        
    }
}

windowsDistZip {
    description = 'Creates Windows distribution packaged as a zip archive'
    dependsOn createExe
}

unixDistTar {
    description = 'Creates *nix distribution packaged as a tar ball'
    dependsOn stageFiles
    dependsOn createStartScripts
    archiveExtension = 'tar.gz'
    compression = Compression.GZIP
}

// The repository can only be cloned into an empty directory so we need to delete anything left over
// from a previous build
task deleteRepoDir (type: Delete) {
    delete = "${repoDir}"
}

task cloneRepo (type: Exec, dependsOn: deleteRepoDir) {
    description = 'Clones the repository to ensure we are working with a clean directory tree'
    group = 'distribution'
    commandLine "git"
    args "clone", "--branch", mmBranch, "--single-branch", mmGitRoot, "${buildDir}/repo"
}

task sourceZip (type: Zip) {
    description 'Creates a zip archive of the source'
    group = 'distribution'
    from (rootDir) {
        exclude "**/build/**"
        exclude "**/.*"
    }
    archiveFileName = "megamek-${archiveVersion}-source.zip"
    destinationDirectory = file(distributionDir)
}

task sourceTar (type: Tar) {
    description 'Creates a compressed tar archive of the source'
    from (rootDir) {
        exclude "**/build/**"
        exclude "**/.*"
    }
    archiveFileName = "megamek-${archiveVersion}-source.tar.gz"
    compression = Compression.GZIP
    destinationDirectory = file(distributionDir)
}

// The distribution plugin adds the distro packages to the assemble task, which causes the build task
// to run all the packaging tasks.
task assemble(overwrite: true) {
    dependsOn jar
}

// Replace the assembleDist task created by the distributions plugin to create the packages we want to
task assembleDist(overwrite: true) {
    description = 'Build unix, Windows, and source packages'
    group = 'distribution'
    dependsOn test
    dependsOn unixDistTar
    dependsOn windowsDistZip
}

task buildFromRepo (type: GradleBuild) {
    description = 'Assembles the distribution packages in the clean repository copy'
    group = 'distribution'
    dependsOn cloneRepo
    
    buildFile = "${repoDir}/build.gradle"
    dir = "${repoDir}"
    tasks = [ ':megamek:assembleDist' ]
}

task release (type: Copy) {
    description = 'Builds the release packages from the repository and copies them into the project build directory'
    group = 'distribution'
    dependsOn buildFromRepo
    
    from (buildFromRepo)
    into "${distributionDir}"
}

task sourcesJar(type: Jar) {
    description = 'Creates a source archive for publication to a maven repository'
    from sourceSets.main.allJava
    archiveClassifier = 'sources'
}

task javadocJar(type: Jar) {
    description = 'Creates a documentation archive for publication to a maven repository'
    from javadoc
    archiveClassifier = 'javadoc'
}

publishing {
    publications {
        publishMMLibrary(MavenPublication) {
            artifactId = "megamek${mmBranchTag}"
            from components.java
            artifact sourcesJar
// Javadoc is full of errors
//            artifact javadocJar

            pom {
                name = "MegaMek"
                description = "MegaMek"
                url = "http://megamek.org"
                licenses {
                    license {
                        name = "GNU General Public License, version 2"
                        url = "https://www.gnu.org/licenses/gpl-2.0.html"
                    }
                }
            }
        }
    }
    repositories {
        maven {
            url uri(mavenPublishDir)
        }
    }
}

task cleanPublishingDir (type: Delete) {
    delete = mavenPublishDir
}

publishPublishMMLibraryPublicationToMavenRepository.dependsOn cleanPublishingDir

