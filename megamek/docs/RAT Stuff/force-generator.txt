Formation Generator
designed by Neoancient

I. Introduction

The formation generator is intended to generate company and larger level forces for any faction in any
era in the BT universe. For most Inner Sphere factions the largest formation generated is a Mek regiment with
infantry, conventional armor, and aerospace support. Federated Suns and FedCom-era Lyran forces can be
built as RCTs, and SLDF forces can be built up to an army in size, though this takes a long time and is
of questionable value. Clan forces can be generated up to a full Touman. The resulting force can be exported
to a MUL file or added to the current game in whole or in part.

The force structure for each faction is based primarily on data from the field manual sourcebooks, with some
additional information coming from technical readouts and certain other sourcebooks. The sources are
not exhaustive and there is necessarily some interpretation and guesswork on my part. From the start this
was designed to produce canonically accurate units, but it is possible with sufficient effort to create
custom unit layouts.

At the lowest eschelon level (Lance, Star, Level II, etc) the units are generated using the RAT Generator,
which was from the beginning designed to be a backend to the force generator. Campaign Operations was released
after development of this project was well underway, and the formation generator was developed to provide
an additional level of force organization between individual units and company and larger-sized units.

II. User Interface

The formation generator is available as a tab in the random army dialog, accessed by a button in the chat
lounge or via file menu during a game.
Year: The game year
Faction: The faction the force belongs to. Some minor factions have no data specific to them, and serve as
         convenient aliases to Periphery or IS generic.
Subfaction: Most major factions have a number of subcommands, which may affect either the type of units
            generated (e.g. Star League Royal) or the formation (e.g. the Ceti Hussars of the Federated Suns
            uses combined arms down to the company level).
Unit Type: The type of force to generate. The special value "Combined" is used for formations that combine
           multiple unit types, such as Clan Clusters and above, or a FedSuns RCT. Some combined arms formations
           are considered an augmentation with a second unit type (such as a Nova or a Capellan augmented
           lance) and are found under the primary unit type rather than combined.
Formation: The eschelon level to generate. Options such as augmented, reinforced, or nova/supernova are
           found here as distinct options.
Rating: The unit equipment rating. Most IS factions use A-F with A being the best. Clan factions have descriptive
        names, with Keshik being better than standard front line and provisional garrison and solahma
        below standard second line. Not all Clans formally designate distinct provisional garrison forces,
        but selected PG will generally result in lower quality units.
Experience: The average experience rating of the entire unit. This is a target number that modifies the
            skill checks, and it is possible due to randomness of the generation process that the resulting
            unit can actually fall into an adjacent band. The larger the unit the closer it will tend to
            be to the target.
Other: This is a miscellaneous category that provides additional options in some contexts. Examples include
       specialized formation types, particularly those of certain Clans (Goliath Scorpion is a notable example)
       and the Mek/armor/infantry ratios used by ComStar Level IIIs and IVs, designated by a Greek letter.
Include Support Forces: If checked, additional support detachments may be generated. It is common for Mek
                        regiments to be assigned armor, infantry, and aero support. Armor units usually
                        have support artillery. Infantry regiments often have some support armor and air
                        (usually conventional fighters), and air units typically have support infantry/armor,
                        including engineers. Higher level eschelons are more likely to have support units.
Mission role (varies by unit type): Designates a special role for the force, which will affect the types
                                    of formations and units generated.
Transport: The percentage of dropship and jumpship capacity to generate along with primary formation. The
           dropship percentage attempts to fulfill the transport needs of the given percentage of units by type.
           For example, 50% will attempt to generate enough dropships to carry half the Meks, half the vees,
           half the infantry, etc. It continues to generate dropships until it meets or exceeds the requirement
           for that unit type, or it cannot find any dropships to carry that unit type. The jumpship percentage
           sets how many of the generated dropships have docking collars to use. Either value can exceed 100%
           to generate excess capacity.
Generate: Generate a force based on the parameters.
Export to MUL: Writes the entire generated force to a MUL file. A portion of the force can be exported
               independently by right-clicking on a node on the force tree and selecting export. This will
               create a MUL of that force and any subforces.
Clear Force: Removes the generated force. The force remains in memory until cleared, another force is generated,
             or MegaMek is closed. This makes it available to use for reinforcements during the game. If
             not needed it can be cleared to free memory.
Chosen Units: A table of units that have been selected from the generated force. Units can be added to the
              table by right-clicking on a node on the force tree and choosing "Add to game". The chosen units
              will be added to game under the current player or selected bot when the user clicks OK.
              Units can be removed by selecting and either pressing the delete key or right click > Remove.

III. Notes about specific formation rules
There are a number of places where the source material is vague or contradictory, requiring certain decisions
to be made about how to generate certain formations. Here are some especially notable ones.
A. Field Manual: Warden Clans states the Clan Steel Viper uses one fighter per Point, resulting in aero Stars
   of five fighters each. The rules for fighter squadrons in Strategic Operations give the size of a Clan
   Star as ten fighters. While it lists variations for Inner Sphere and Periphery factions, there is no
   mention of any variation in Clan forces. I have opted to use the field manual, since it makes CSV more
   distinctive.
B. According to Field Manual: Crusader Clans, Clan Jade Falcon does not deploy combat vehicles. The history given
   for Clan vehicles in the technical readouts makes it clear that they did use them in earlier eras, so this
   was not always the case and it is unclear when they allegedly stopped using vehicles or whether that
   persisted or for how long. Field Manual: Updates, with an in-game date less than a decade later, does
   give random assignment tables for Jade Falcon vehicles. I chose to interpret the statement in FM:CC,
   attributed to the Clan Loremaster in the context, to be a statement that could be claimed to be technically
   true but is actually intended to mislead. A more precise statement would have been that as a general
   rule Clan Jade Falcon does not make active use of combat vehicles in a direct combat role. Thus
   the CJF forces in the post-invasion era include a reduced number of combat vehicles, which are predominantly
   found in support and indirect combat roles such as recon and fire support.
C. According to Field Manual: ComStar, combined arms units are the rule for Level IIIs and above, but Level IIs
   tend to be uniform. The numbers don't quite work for that, but in distributing the given ratio of
   Mek/armor/infantry forces, there is a strong preference for uniform Level IIs, with any necessary mixing
   being only two distinct unit types, either 4/2 or 3/3. In a few rare cases there will be a Level II
   with two Meks, two vehicles, and two infantry or BA Level Is. With 39 as the standard number of fighters in
   a Level IV, each level III gets six fighters to form one of its six Level IIs, with the remaining three
   fighters being joined by three Meks to form a command Level II.
D. Several factions (ComStar, Marian Hegemony, and Taurian Concordat) use infantry platoon formations
   that do not have corresponding units in MegaMek at the time of this writing. In these cases, the closest
   Inner Sphere unit is used instead. Also, MegaMek does not have three-suit BA squads as used by the Society,
   so BA uns are generated as standard Clan Points.     

IV. Customizing the Formation Rules

This section documents the xml-based language used to define the force generation rules for each faction. This
is provided for anyone who wants to create custom formation building rules, but is made with no promise of
support if your file produces unexpected results. When troubleshooting a problem with generation, it can
be helpful to edit the logging configuration file (mmconf/log4j.xml) and uncomment the two sections pertaining
to force generator logging by removing the <!-- at the beginning of the line and the --> at the end. This
will enable debugging output and log messages from force generation to a separate file.

A. Overview
The ruleset files are found in data/forcegenerator/faction_rules. Each faction which has anything distinct about
its organization has a file. There are also generic rulesets for IS, Periphery, and Clan forces which can be
used for generic or minor factions, but also provide basic rules for factions in each of the three categories.
Some factions have additional rules for more distinctive subcommands. Any behavior defined by a parent faction
is inherited by a child faction unless explicitly overridden. So, for example, when building a force for
Kindraa Kline of Clan Fire Mandrill, the force generator will first check the Kindraa Kline ruleset to find
a rule that matches the node it's working on. If no matching rule is found there, it will check the Clan
Fire Mandrill rules. If still not found, it will check the generic Clan rules. If still not found, it will
log an error and leave the node empty.

The process of generation begins by creating the root force and setting the properties selected by the user
(for example, a veteran Draconis Combine Mek regiment in 3062). After finding the correct rule for Mek
regiments in the Draconis Combine ruleset, it will set all additional properties indicated by the rule
(such as the commander rank) and create a list of subforces (three battalions, plus support units if requested).
The battalions will be created with the same general properties as the regiment, plus any new ones assigned
by the regiment rule. It will then process each battalion node in turn, working its way down to selecting
the units that make up each lance.

B. Constants
A number of constants are available to make ruleset files more readable. Constants are preceded and followed
by percent signs: %CONSTANT%. The available constants are found in the constants.txt file in the same directory
as the ruleset files.

C. Example
This is the rule for a Mek regiment from the generic Inner Sphere ruleset. A line by line explanation follows.

1	<force eschelon="%REGIMENT%" eschName="Regiment" ifUnitType="Mek|Tank">
2		<co>%COLONEL%</co>
3		
4		<weightClass>
5			<option weight="1">L</option>
6			<option weight="2">M</option>
7			<option weight="1">H</option>
8		</weightClass>
9		
10		<subforces>
11			<subforceOption ifWeightClass="L">
12				<option weightClass="H,L,L">%BATTALION%</option>
13				<option weightClass="M,M,L">%BATTALION%</option>
14				<option weightClass="M,L,L">%BATTALION%</option>
15				<option weightClass="L,L,L">%BATTALION%</option>
16			</subforceOption>
17			<subforceOption ifWeightClass="M">
18				<option weightClass="H,H,H">%BATTALION%</option>
19				<option weightClass="H,H,M">%BATTALION%</option>
20				<option weightClass="H,H,L">%BATTALION%</option>
21				<option weightClass="H,M,M">%BATTALION%</option>
22				<option weightClass="H,M,L">%BATTALION%</option>
23				<option weightClass="M,M,M">%BATTALION%</option>
24			</subforceOption>
25			<subforceOption ifWeightClass="H|A">
26				<option weightClass="A,A,A">%BATTALION%</option>
27				<option weightClass="A,A,H">%BATTALION%</option>
28				<option weightClass="A,A,M">%BATTALION%</option>
29				<option weightClass="A,H,H">%BATTALION%</option>
30				<option weightClass="A,H,M">%BATTALION%</option>
31				<option weightClass="A,H,L">%BATTALION%</option>
32				<option weightClass="A,M,M">%BATTALION%</option>
33				<option weightClass="A,M,L">%BATTALION%</option>
34			</subforceOption>
35		</subforces>
36		
37		<attachedForces ifUnitType="Mek">
38			<subforce unitType="Aero"
39				name="Aerospace Support">%WING%</subforce>
40			<subforce unitType="Tank"
41				name="Armor Support">%BATTALION%</subforce>
42			<subforce unitType="Infantry"
43				name="Infantry Support">%REGIMENT%</subforce>			
44		</attachedForces>
45
46		<attachedForces ifUnitType="Tank" ifDateBetween=",2550">
47			<subforce unitType="Aero"
48				name="Aerospace Support">%WING%</subforce>
49			<subforceOption ifDateBetween="2481,">
50				<option ifRating="D|F"/>
51				<option ifDateBetween=",2500"/>
52				<option unitType="Mek" ifDateBetween=",2520">%COMPANY%</option>
53				<option unitType="Mek" ifDateBetween="2500,2530">%BATTALION%-</option>
54				<option unitType="Mek" ifDateBetween="2520,2549">%BATTALION%</option>
55			</subforceOption>
56			<subforce unitType="Infantry"
57				name="Infantry Support">%REGIMENT%</subforce>			
58		</attachedForces>
59	</force>
	
1: This rule will match any node that is designated as eschelon level 6 (the value of %REGIMENT%)
   and has a unit type of Mek or Tank. The default name of the unit is "Regiment".
2: The rank of the commanding officer is colonel. This has no effect on MegaMek play, but will
   be used to assign a rank to personnel generated in MekHQ.
4-8: sets the weightClass property of the node if it has not already been set. The "weight"
     attribute of each option determines how heavily that option is weighted. In this example there is
     a 1/4 chance each for L or H, and a 2/4 chance of M.
10-25: Assigns the subforces. This section can contain any number of <subforce> or <subforceOption>
       elements. A <subforce> element is used for a set value, while <subforceOption> will select one of
       a series of options. All matching elements will be added as a subforce. In this case the parameters
       assure that only one of the three <subforceOption> elements will match any given regiment. Each
       option creates three nodes under the regiment, assigns 5 (the value of %BATTALION%) to the eschelon
       property, and distributes the three given weightClass property values among the three nodes.
26-44: If this is a Mek regiment add an aerospace wing, a tank battalion, and an infantry battalion as
       support forces. <attachedForces> elements are only processed if the support forces option is selected.
45-59: This rule only applies up to the year 2550, by which Meks have become the backbone of all Inner Sphere
       militaries. Most major factions override this rule to make the transition earlier, but these dates
       will apply to minor factions such as the Principality of Rasalhague.
   49-55: Starting in 2481, there is a chance of adding a Mek company or battalion to the armor regiment.
          The attributes for the various options provide variations in the size of the Mek detachment over
          time. Up to 2500 there is a chance of a Mek company. From 2500-2520 it could be either a company
          or a battalion. After 2520 it is always a battalion. But units with an equipment rating of D/F
          always have a chance of not having any Mek detachment.

D. Properties and rule matching
As seen in the example, each node has a set of properties that can be used to determine whether to apply
a rule or an option, and can also be changed for the current node or for child nodes. In the example the
weight class is set for the current node. The weight class and eschelon are set for the subforces, and the
unit type and eschelon for the attached forces. Interactions with properties take two forms: assertions are
used to set, clear, or change values of properties. Predicates are used to check the values of properties
to determine whether to apply a rule or an option.

Assertion	Predicate		Possible values
unitType	ifUnitType		One of the following values: Mek, Tank, BattleArmor, Infantry, ProtoMek, VTOL,
                        	Conventional Fighter, Aero, Small Craft, Dropship, Jumpship, Warship, Space Station
weightClass	ifWeightClass	L, M, H, A. This value is used to indicate a target weight class for each node
							of the force tree, but when it comes to generating the actual units, the formation
							bulder does not use individual unit weights. If using the formation property,
							the weightClass property should be used as a guide in selecting appropriate
							formations. If the formation property is not set, or the formation builder cannot
							generate a formation based on the provided parameters, the fallback behavior is
							to generate units individually using the weightClass property.
rating		ifRating		varies by faction
role		ifRole			This value is passed to the RAT Generator to affect the types of units
                            generated. Unknown values will be ignored, so this could be used for arbitrary
                            values but the flags property is preferred for that purpose (Set).
formation	ifFormation		The lance formation (see Campaign Operations) used to generate units. When
                            formations are used, the generated lance weights may not always match up with
                            the weightClass property.
motive		ifMotive		A motive type constant, typically used for vehicles and infantry (Set).
augmented	ifAugmented		A boolean value that has no defined effect, but indicates that the eschelon is
                            varied in some way. Clans use it to indicate a Nova or Supernova, Blakist
                            Shadow Divisions use it for a choir, and Capellan units use it for an augmented
                            formation.
chassis		ifChassis		All units of this node and any child nodes will have this chassis (Set).
model		ifModel			Assigns the exact unit (chassis and variant) to this node and all subforces (Set).
variant		ifVariant		Assigns the variant (but not the chassis) to this node and all subforces. This
                            has little use apart from conventional infantry to assign a particular weapon (Set).
name		ifName			Sets the name of the node. Overrides the eschelon default name.
fluffName	fluffName		Has no effect on the way the unit is generated, but assignes the name to a particular
                            unit. This is used in the provided rulesets to assign canonical names to WarShips
                            when generating a Clan Touman in the post-Invasion era, when such information
                            is documented.
faction		ifFaction		A faction key. As an assertion it can be used to switch the rules used for the
							subforces, such as generating each Kindraa of the Clan Fire Mandrill Touman. The
							predicate can be used to provide an alternate organization for a subcommand,
							such as DC Sword of Light regiments, which have four battalions.
flags		ifFlags			Can be anything. Used for arbitrary user-defined data (Set).

The following are available only as predicates:
ifTopLevel		Boolean value that is true if this is the toplevel node.
ifIndex			Used to test the current node's position within its sibling nodes. The first index position
                is 0.
ifDateBetween	A set of date ranges. The ranges are expressed two dates separated by a comma. An open-ended
                range leaves the corresponding value blank: ifDateBetween="3050,3055" will match any
                year from 3050-3055 (inclusive), while ifDateBetween=",3050" will match any year up to
                and including 3050 and ifDateBetween="3050," will match any year from 3050 on. (Set)
                
augmented, topLevel, and index are boolean properties and can have the value 0 or 1. Properties that are
identified as a set in the description above can have multiple values. All others have a single value.

Properties are assigned using an xml attribute of the form propertyName="value". Set properties can have
multiple values set at once by separating them with commas (no spaces): propertyName="val1,val2,val3". Assigning
in this manner will clear any previous value. To add them to the previous value, begin with a +:
propertyName="+val1,val2". To clear a property, prefix with -: propertyName="-val1,val2".

Testing for a single value also uses an xml attribute, using the corresponding predicate name:
ifPropertyName="value". If the property data type is a set, then it will match if the set contains the given
value. Some simple boolean expressions are possible. The most common is the OR operator:
ifPropertyName="val1|val2" will match if the property is set to either of the two values. The AND operator
is only useful for set properties: ifPropertyName="val1,val2" matches if the property contains both values.
It may contain other values as well, but they have no effect on the test. The comma is used for the AND
operator because the ampersand (&) has a special meaning in xml. The OR operator has a higher precedence;
"val1|val2,val3|val4" is evaluated as (val1 OR val2) AND (val3 OR val4). In order to keep the parsing simple,
there are no grouping operators to override this. Use of both operators in a single statement is discouraged
for clarity. There is also a NOT operator, which applies to the entire expression: "!val1|val2" will match
if the property is neither val1 nor val2.

E. The random element
Variability in the force structure and composition is handled by use of a series of <option> elements. These
can appear in a number of different contexts, so their function is described here for general reference. This
description applies to <option> elements found within <force> rules. Those found in the <toc> section simply
give all the available options and are not used for random determination of a value. An
<option> element can take any of the assertions or predicates as attributes, and can also take a weight
attribute that increases the probability of selecting that option proportionally to the attribute's integer
value. All <option> elements without an explicit weight attribute have a weight of 1. Anywhere <option>
elements are used, the force generator selects all those that match the properties of the current node
based their predicate attributes, then selects one using their weighted values. The content of the selected
<option> node is the value used by the force generator. If the option node contains any assertions they
applied to the current node's properties unless found within the <subforces> or <attachedForces> section
of a force node, in which case they are applied to the newly created node.

F. Ruleset file format
The formal definition of the force generator language is found in formationRulesetSchema.xsd in the ruleset
directory (data/forcegenerator/faction_rules).

1. The root element is <ruleset>, which can have the following attributes:
	a. faction: the faction key. This should have a corresponding entry in the RAT Generator. If not provided,
	            the file name is used.
	b. parent: the ruleset to use if a matching force rule is not found in this file. If not provided,
	           the default value is IS, Periphery, or CLAN, depending on how the faction is defined
	           by the RAT Generator.
	c. ratingSystem: This provides the values used for the rating property. It can be any of the values
					 [ IS | SL | CLAN | ROS ]. IS uses A,B,C,D,F. SL is a subset that only includes A-C.
	                 CLAN uses Keshik, FL, SL, Sol, PG. ROS uses SB, HS, PG, TP. If not provided, defaults
	                 to IS.
	                 ***FIXME: This really shouldn't be hard-coded.
	                 
2. The <ruleset> element contains the following child elements:
	<defaults> [once]: Various default values for the faction as a whole
	<customRanks> [optional]: Allows a faction to provide a unique rank system or customize certain rank names.
	<toc> [optional]: Informs the UI which unit types are available, and which formations are appropriate
	                  to certain unit types.
	<force> [any number]: Provides the rules for generating each node of the force tree.
	
3. The <defaults> element can have one or more of any of the following child elements. Each can use predicate
   attributes to provide different default values based on other properties (usually the year).
	<unitType>: selects the unit type to use in the root node if it has not been assigned.
	<eschelon>: as unit type, but selects the default eschelon level.
	<rankSystem>: used for MekHQ integration. This should be the index used by MekHQ. Constants are provided
	              for the various systems. If using any custom ranks, use the value %RANK_CUSTOM%.
	<rating>: the default equipment rating to use for the generated unit if one has not been assigned.
	
4. The <customRanks> element has the following child elements:
	<base>: the rank system that will provide any rank names that are not overridden.
	<rank> [any number]: A rank level followed by one or more rank names. All fields are separated by a colon.
						 The rank level is a numeric value that should match the rank level in MekHQ.
						 Constants are provided for common values. If one rank name is provided, it is used
						 for all branches. Different rank names can be provided for different branches
						 (e.g. Colonel for ground forces and Captain for naval) using the format used
						 by MekHQ. See the ranks tab in the MekHQ campaign options for format details.
						 
5. The <toc> element has up to four child elements, each of which contains an arbitrary number of
   <option> elements. These are used by the user interface to show all available options to the user.
   The <option> elements can use predicates to restrict the list of available options based on various
   criteria. This is often the date (e.g. don't present BattleArmor before they are available to the faction)
   or unit type. <option> predicates that refer to other <toc> elements should only reference those that
   come earlier to prevent a set of conditions that make some alternatives inaccessible.
   
   The possible child elements and the contents of their <option> elements are as follows:
   <unitType>: A comma-separated list of unit types. Anything that is legal as a unitType property is legal here.
   <eschelon>: A comma-separated list of all eschelon levels available. The eschelon level is a numeric
               value (constants are available for common values). The numeric value may be followed by ^
               to indicate augmented, + for reinforced, or - for understrength.
   <rating>: A comma separated list of which levels of the rating system (designated in the <default>
             section) to use. This is most often to restrict the rating systems by unit type, such as
             most Clan factions which restrict vehicle forces to second line formations.
   <flags>: A comma-separated list of flags that can be set by the user. Each entry has the format
            flagValue:displayName. The displayName is what is shown to the user and the flagValue is
            set as a flag property in the root formation node, which will be passed to child nodes.
            CGS, CHH, or CSA are a few of the factions that can be consulted for examples.

6. A ruleset can contain any number of <force> elements. These contain the actual rules for building
   the force at each eschelon level. When generating a node, the force generator checks the ruleset
   matching the node's faction for the first <force> element that matches the node properties. If none
   is found, it will repeat the search using each parent faction until it finds a match.
   
   The <force> element has the following attributes, in addition to the standard list of predicates:
       eschelon [required]: A numeric value indicating the tier of organization. While it is possible to
       						use any arbitrary value, it is recommended for purposes of clarity that the
       						values increase at higher levels of organization. Constants are provided for
       						common values used by Inner Sphere, Clan, and ComStar forces.
	   eschName: A String value that is used by the user interface as a display name of the eschelon. It
	             is also used to create a default name for the force node if no <name> element is present.
	             If missing, the numeric value is used.
	             
   The <force> element has the following child elements. Only the <co> element is required, and all may
   occur multiple times:
       <name>: Provides a name for the unit represented by the current force tree node.
       <co>: The rank level of the commanding officer, and optionally the location
			of the commander's unit in the force tree.
       <xo>: The rank of the executive officer, if any, as well as the location
            of the XO's unit in the force tree.
       property rules [various]: Provides an opportunity to change the properties of this node.
       <subforces>: Generates child nodes which inherit the current node's properties.
       <attachedForces>: Generates child nodes in the force tree, but is only processed if the user has
            support force generation enabled.
            
            
	a. The <name> node can have any of the predicate attributes. Where multiple matches can occur the
	   first match is used. The name can be simple text, but can also contain values that are evaluated
	   based on the current node's position among its siblings or its parent's position. Values to be
	   evaluated are placed in braces. For example, "{ordinal} Battalion" can evaluate to "First Battalion"
	   or "Second Battalion" and so on, depending on its position in the regiment. The available expression
	   are as follows:
	   {cardinal}: A cardinal numeral (1, 2, 3, etc.)
	   {ordinal}: An ordinal number (First, Second, Third, etc.)
	   {roman}: Roman numerals (I, II, III, etc.) 
	   {alpha}: Letters of the Latin alphabet (A, B, C, etc.)
	   {phonetic}: The phonetic alphabet (Alpha, Bravo, Charlie, etc.)
	   {greek}: Names of Greek letters (Alpha, Beta, Gamma, etc.)
	   {latin}: Latin numbers (Prima, Secunda, Tertia, etc.)
	   {parent}: The name of the parent formation.
	   {formation}: A display-friendly name of the node's formation property.
	   
	   To use the position of the parent node among its siblings, you can append ":parent" to the expression.
	   A portion of the parent name can be used by surrounding that portion with square brackets and using
	   {name:parent} in the <name> tag of the child node. This is found in several Clan factions. In Snow
	   Raven, for example, you might have a medium Trinary name "Alpha Striker Trinary" and its component
	   Stars are named "First Striker, Second Striker, Third Striker".
	   Following the expression with ":distinct" will cause it to be used only if needed to prevent multiple
	   subforces within the same node from having the same name.
	   
	   Example, from Clan Jade Falcon:
	   		<name ifWeightClass="M">{phonetic:parent} Beak {cardinal:distinct}</name>
		A medium Star in Trinary Alpha will be Alpha Beak. If it's in Trinary Bravo it will be Bravo Beak.
		If there are two medium Stars in Trinary Bravo they will be Bravo Beak 1 and Bravo Beak 2.
		
	b. The <co> and <xo> elements have the same format. They can have any of the standard predicates and
	   the content is a numeric value indicating the rank. Several common rank constants are provided. An XO
	   is assigned only if an XO attribute that matches the node properties is present.
	   The following attributes are also available:
	   position: A numeric value used to place the officer in a particular place in the force tree or have the
	       officer not command a unit at all. By default the force generator will follow the
	       first branch of each level of child nodes until it finds a unit and place the CO there. If the value
	       of the position attribute is 0, the CO is not assigned to a unit. An XO (if any) is by default assigned
	       to the first subforce that does not contain the CO. For example, in a regiment the CO directly
	       commands the first battalion and the XO the second (or the CO has a command company and the XO
	       has the first battalion). If the position attribute has a value of 0, the XO is assigned to the first
	       subforce. If the CO and the XO have the same value for the position attribute they are assigned to
	       different subforces within the same direct subforce. For example, in most Draconis Combine regiments
	       the CO commands the first battalion, first company, and the XO commands the first battalion, second
	       company. Both the <co> and <xo> elements have the attribute position="1".
	   unitType: Places the CO or XO in the given unit type in a combined arms unit, such as a Capellan augmented
	       lance. The special value of "other" is available for <xo> elements to match any unit type other
	       than the one assigned to the CO. This allows Clan nova units to use either a mechwarrior or a
	       BA pilot as the Nova Commander and assign a Star Commander to the other unit type.
	   title: Assigns a title in addition to the rank title, such as "Aide-de-Camp"
	       
	c. Property rule elements change the properties of the current unit before the subforces
	   are generated. The available property rule elements are <weightClass>, <unitType>, <chassis>, <variant>,
	   <motive>, <formation>, <role>, <flags>, and <changeEschelon>. Each potentially changes the property
	   with the same name. <changeEschelon> differs from the others in that it does not have the same name
	   as the property to highlight the fact that if the property is changed the force generator immediately
	   stops applying the current force rule and searches for a new matching rule to apply instead.
	   
	   With the exception of <role> and <flags>, which are property sets, and <changeEschelon>, which is a
	   special case, property rule elements are ignored if they already have a value unless they also contain
	   the matching predicate. So <weightClass> will be skipped if the weightClass property has previously
	   been set, but <weightClass ifWeightClass="L"> will be evaluated for all light units. This is nearly
	   always the desired behavior. If for any reason you want a rule to be evaluated for a property that
	   is already set, you can do so with a dummy <flags> rule (which is always evaluated, as it is a set
	   property). For example, <flags><option weightClass="L"/><option weightClass="M"/></flags> gives a 50%
	   chance each of changing the weightClass property to L or M regardless of whether it has previously been
	   set.
	   
	   Each property rule element can use the standard predicates as attributes, and any that do not match
	   the current node's properties are skipped. The property rule element contains any number of
	   <option> tags, which are used to determine the value for the property as described above (see
	   E. The random element). The selected value is applied using the same rules as assertions. Other
	   properties may also be changed by assertions that are found as attributes in the selected
	   <option>.
	   
	   Property rule elements will be checked for matching properties before any of them are evaluated,
	   so any changes to properties made by an earlier rule will not have an effect on whether a later
	   rule matches. If it is necessary to evaluate one rule before determining whether to apply another,
	   they can be wrapped in <ruleGroup> nodes. Any matching rules within a group are evaluated before
	   proceeding to the next group. Any property rules not wrapped in a <ruleGroup> node are considered part
	   of the same group, which is evaluated first. One exception to the order of evaluation is the
	   <changeEschelon> rule, which (as noted above) stops evaluation of the current force rule immediately.

	d. A <subforces> element can have any of the standard predicate attributes. It can also use the generate
	   attribute, which invokes the RATGenerator using the properties of the current node and applies the
	   result according to the attribute value.
	   chassis: A single unit is generated and used to set the chassis property. All units within child
	            nodes of the force tree will be variants of the same chassis unless they clear the property.
	            This is only invoked if the chassis property is not already set.
	   model: As chassis, but sets the model property instead. All units within child nodes of the force
	          tree will be identical.
	   group: The subforces are generated as a cohesive unit using the lance generation rules. If the
	          formation property is set, the units will be generated using the Campaign Operations
	          formation building rules. If not set, or a legal formation could not be generated with to
	          match the node properties, some rules of unit compatibility will still apply, such
	          as fighters being paired and vehicles having the same motive type. Each subforce node
	          will have its model property set to the corresponding generated unit. This is most often
	          used at the Lance/Star/Level II level, but can also be used at higher levels to create
	          uniform units. For example, SLDF line regiments use this at the battalion level to generate
	          a three-unit lance, and each company is made up uniformly of one of the three generated
	          units. ***Note that the formation builder does not take unit weight classes into account
	          other than as required by the rules for the particular formation. Weight classes are only
	          used for individual units if the formation cannot be generated or the formation property is
	          not set.
	
	   A <subforces> element can contain the following child elements:
		<subforce>: Adds one or more child nodes to the force tree when the child nodes have the fixed
		            properties.
		<subforceOption>: Adds one or more child nodes to the force tree from a list of alternatives
		                  provided by <option> elements.
		<asParent>: Redirects the force generator to the parent ruleset. It will find a force rule matching
			        the current force node and apply only the subforce section. This is most often used
			        to avoid repeating identical force generation rules when overriding the behavior of
			        a parent faction to set properties differently. <asParent> has no content, is the
			        only child node of a <subforces> element.
		<asFaction>: Works like <asParent>, but allows the user to specify the faction to redirect to.
		             The faction key is the content.
		             
		The subforces section can contain any number of <subforce> or <subforceOption> elements, in any
		order. A <subforce> element can have any of the standard predicate or assertion attributes.
		Assertions are applied to the generated subforce. The content is the eschelon level for the subforce,
		which is an integer value which is optionally followed by + or -, which indicate a reinforced
		or understrength unit respectively. The + and - will affect the number of subforces generated by the
		direct subforce. For example, if a regiment rule generates a %BATTALION%+, that battalion will
		have four companies instead of three.
		
		The following additional attributes are available for the <subforce> element:
		num: The number of subforce nodes to generate. If not present, defaults to one. So
		     <subforce>%COMPANY%</subforce> will generate a single company, while <subforce num="3">%COMPANY%</subforce>
		     will generate three companies.
		weightClass: This functions slightly differently within a <subforce> element. The value is a
		             comma-separate list of weightClass values. One subforce node is created for each
		             value, and the values are distributed to the subforces. So
		             <subforce weightClass="H,H,M">%COMPANY%</subforce> will generate two heavy companies
		             and one medium. Using a weightClass attribute makes the num attribute unnecessary,
		             and it is an error to use both with different counts.
		generate: Functions as the generate attribute of the <subforces> element, but is applied independently
		          to each subforce node using that node's properties.
		          
		A <subforceOption> element can take any of the standard predicate attributes, as well as the
		generate attribute. If present, the generate attribute is applied to the selected <option> in the
		same way that it is applied to a <subforce> element. The <option> child elements use the same
		attributes and content as the <subforce> element, with the exception of the generate attribute.
		An <option> element can be empty, which results in a subforce node not being added.
		
	e. The <attachedForces> element has the same options for attributes and child elements as the
	   <subforces> element, and they function in the same way. The difference is that <attachedForces>
	   nodes are ignored if the user has disabled generation of support forces, and if generated the
	   CO and XO (if present) are never assigned to attached forces.
	   
	   