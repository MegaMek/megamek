/*
 * Copyright (c) 2024 - The MegaMek Team. All Rights Reserved.
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the Free
 * Software Foundation; either version 2 of the License, or (at your option)
 * any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 * for more details.
 *
 */

package megamek.client.ui.swing.ai.editor;

import megamek.ai.utility.Consideration;
import megamek.ai.utility.DefaultCurve;
import megamek.client.bot.caspar.ai.utility.tw.considerations.TWConsideration;
import megamek.client.bot.caspar.ai.utility.tw.considerations.TWConsiderationClass;

import javax.swing.*;
import java.awt.*;
import java.lang.reflect.Method;
import java.util.ResourceBundle;

public class ConsiderationPane extends JPanel {
    private JTextField considerationName;
    private JComboBox<TWConsiderationClass> considerationComboBox;
    private JPanel curveContainer;
    private JTable parametersTable;
    private JPanel considerationPane;
    private JPanel topThingsPane;

    public ConsiderationPane() {
        $$$setupUI$$$();
        add(considerationPane);

        considerationComboBox.addActionListener(e -> {
            if (considerationComboBox.getSelectedItem() == null) {
                return;
            }

            var selectedClass = ((TWConsiderationClass) considerationComboBox.getSelectedItem()).getConsiderationClass();
            if (selectedClass == null) {
                return;
            }

            try {
                // Create a new instance via reflection
                var newInstance = (TWConsideration) selectedClass.getDeclaredConstructor().newInstance();

                // Populate your fields (likely blank or default if no-arg constructor doesn't do much)
                considerationName.setText(selectedClass.getSimpleName());
                ((ParametersTableModel) parametersTable.getModel()).setParameters(newInstance);
                ((CurvePane) curveContainer).setCurve(DefaultCurve.Linear.getCurve());
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(
                    this,
                    "Failed to instantiate " + selectedClass.getSimpleName() + ": " + ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE
                );
            }

        });
    }

    public void setConsideration(Consideration<?, ?> consideration) {
        considerationComboBox.setSelectedItem(TWConsiderationClass.fromClass(consideration.getClass()));
        considerationName.setText(consideration.getName());
        parametersTable.setModel(new ParametersTableModel(consideration));
        ((CurvePane) curveContainer).setCurve(consideration.getCurve());
    }

    public void setEmptyConsideration() {
        considerationComboBox.setSelectedItem(null);
        considerationName.setText("NEW CONSIDERATION");
        parametersTable.setModel(new ParametersTableModel());
        ((CurvePane) curveContainer).setCurve(DefaultCurve.Linear.getCurve());
    }

    public void setHoverStateModel(HoverStateModel model) {
        ((CurvePane) curveContainer).setHoverStateModel(model);
    }

    public TWConsideration getConsideration() {
        var selectedItem = (TWConsiderationClass) considerationComboBox.getSelectedItem();
        if (selectedItem == null) {
            throw new IllegalStateException("No consideration selected");
        }

        try {
            var consideration = (TWConsideration) selectedItem.getConsiderationClass().getDeclaredConstructor().newInstance();
            consideration.setName(considerationName.getText());
            consideration.setParameters(((ParametersTableModel) parametersTable.getModel()).getParameters());
            consideration.setCurve(((CurvePane) curveContainer).getCurve().copy());
            return consideration;
        } catch (Exception ex) {
            throw new IllegalStateException("Failed to instantiate " + selectedItem.getConsiderationClass().getSimpleName(), ex);
        }
    }

    private void createUIComponents() {
        parametersTable = new ConsiderationParametersTable(new ParametersTableModel());
        considerationComboBox = new JComboBox<>(TWConsiderationClass.values());
        considerationComboBox.setSelectedItem(null);

        curveContainer = new CurvePane();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        considerationPane = new JPanel();
        considerationPane.setLayout(new GridBagLayout());
        considerationPane.setAutoscrolls(false);
        considerationPane.setMaximumSize(new Dimension(800, 600));
        considerationPane.setMinimumSize(new Dimension(800, 300));
        considerationPane.setPreferredSize(new Dimension(800, 600));
        topThingsPane = new JPanel();
        topThingsPane.setLayout(new GridBagLayout());
        GridBagConstraints gbc;
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.gridheight = 2;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.BOTH;
        considerationPane.add(topThingsPane, gbc);
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.gridwidth = 6;
        gbc.weightx = 1.0;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        topThingsPane.add(considerationComboBox, gbc);
        considerationName = new JTextField();
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 3;
        gbc.gridwidth = 6;
        gbc.weightx = 1.0;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        topThingsPane.add(considerationName, gbc);
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 5;
        gbc.gridwidth = 6;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.BOTH;
        topThingsPane.add(curveContainer, gbc);
        final JLabel label1 = new JLabel();
        this.$$$loadLabelText$$$(label1, this.$$$getMessageFromBundle$$$("megamek/common/options/messages", "aiEditor.curve"));
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 4;
        gbc.weightx = 1.0;
        gbc.anchor = GridBagConstraints.WEST;
        topThingsPane.add(label1, gbc);
        final JLabel label2 = new JLabel();
        this.$$$loadLabelText$$$(label2, this.$$$getMessageFromBundle$$$("megamek/common/options/messages", "aiEditor.name"));
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 2;
        gbc.gridwidth = 6;
        gbc.weightx = 1.0;
        gbc.anchor = GridBagConstraints.WEST;
        topThingsPane.add(label2, gbc);
        final JLabel label3 = new JLabel();
        this.$$$loadLabelText$$$(label3, this.$$$getMessageFromBundle$$$("megamek/common/options/messages", "aiEditor.considerationType"));
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.gridwidth = 6;
        gbc.weightx = 1.0;
        gbc.anchor = GridBagConstraints.WEST;
        topThingsPane.add(label3, gbc);
        final JLabel label4 = new JLabel();
        this.$$$loadLabelText$$$(label4, this.$$$getMessageFromBundle$$$("megamek/common/options/messages", "aiEditor.parameters"));
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 2;
        gbc.weightx = 1.0;
        gbc.anchor = GridBagConstraints.WEST;
        considerationPane.add(label4, gbc);
        parametersTable.setFillsViewportHeight(false);
        parametersTable.setPreferredScrollableViewportSize(new Dimension(100, 50));
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 3;
        gbc.weightx = 1.0;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        considerationPane.add(parametersTable, gbc);
        label2.setLabelFor(considerationName);
        label3.setLabelFor(considerationComboBox);
    }

    private static Method $$$cachedGetBundleMethod$$$ = null;

    private String $$$getMessageFromBundle$$$(String path, String key) {
        ResourceBundle bundle = ResourceBundle.getBundle(path);

        return bundle.getString(key);
    }


    private void $$$loadLabelText$$$(JLabel component, String text) {
        StringBuffer result = new StringBuffer();
        boolean haveMnemonic = false;
        char mnemonic = '\0';
        int mnemonicIndex = -1;
        for (int i = 0; i < text.length(); i++) {
            if (text.charAt(i) == '&') {
                i++;
                if (i == text.length()) break;
                if (!haveMnemonic && text.charAt(i) != '&') {
                    haveMnemonic = true;
                    mnemonic = text.charAt(i);
                    mnemonicIndex = result.length();
                }
            }
            result.append(text.charAt(i));
        }
        component.setText(result.toString());
        if (haveMnemonic) {
            component.setDisplayedMnemonic(mnemonic);
            component.setDisplayedMnemonicIndex(mnemonicIndex);
        }
    }


    public JComponent $$$getRootComponent$$$() {
        return considerationPane;
    }

}
