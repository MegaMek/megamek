/*
 * Copyright (c) 2024 - The MegaMek Team. All Rights Reserved.
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the Free
 * Software Foundation; either version 2 of the License, or (at your option)
 * any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 * for more details.
 *
 */

package megamek.client.ui.swing.ai.editor;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import megamek.ai.utility.Consideration;
import megamek.ai.utility.DefaultCurve;
import megamek.client.bot.queen.ai.utility.tw.considerations.TWConsideration;

import javax.swing.*;
import java.awt.*;
import java.lang.reflect.Method;
import java.util.ResourceBundle;

public class ConsiderationPane extends JPanel {
    private JTextField considerationName;
    private JComboBox<TWConsiderationClass> considerationComboBox;
    private JPanel curveContainer;
    private JTable parametersTable;
    private JPanel considerationPane;
    private JPanel topThingsPane;

    public ConsiderationPane() {
        $$$setupUI$$$();
        add(considerationPane);

        considerationComboBox.addActionListener(e -> {
            if (considerationComboBox.getSelectedItem() == null) {
                return;
            }

            var selectedClass = ((TWConsiderationClass) considerationComboBox.getSelectedItem()).getConsiderationClass();
            if (selectedClass == null) {
                return;
            }

            try {
                // Create a new instance via reflection
                var newInstance = (TWConsideration) selectedClass.getDeclaredConstructor().newInstance();

                // Populate your fields (likely blank or default if no-arg constructor doesn't do much)
                considerationName.setText(selectedClass.getSimpleName());
                ((ParametersTableModel) parametersTable.getModel()).setParameters(newInstance);
                ((CurvePane) curveContainer).setCurve(DefaultCurve.Linear.getCurve());
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(
                    this,
                    "Failed to instantiate " + selectedClass.getSimpleName() + ": " + ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE
                );
            }

        });
    }

    public void setConsideration(Consideration<?, ?> consideration) {
        considerationComboBox.setSelectedItem(TWConsiderationClass.fromClass(consideration.getClass()));
        considerationName.setText(consideration.getName());
        ((ParametersTableModel) parametersTable.getModel()).setParameters(consideration);
        ((CurvePane) curveContainer).setCurve(consideration.getCurve());
    }

    public void setEmptyConsideration() {
        considerationComboBox.setSelectedItem(null);
        considerationName.setText("");
        ((ParametersTableModel) parametersTable.getModel()).setEmptyParameters();
        ((CurvePane) curveContainer).setCurve(DefaultCurve.Logit.getCurve());
    }

    public void setHoverStateModel(HoverStateModel model) {
        ((CurvePane) curveContainer).setHoverStateModel(model);
    }

    public TWConsideration getConsideration() {
        var selectedItem = (TWConsiderationClass) considerationComboBox.getSelectedItem();
        if (selectedItem == null) {
            throw new IllegalStateException("No consideration selected");
        }

        try {
            var consideration = (TWConsideration) selectedItem.getConsiderationClass().getDeclaredConstructor().newInstance();
            consideration.setName(considerationName.getText());
            consideration.setParameters(((ParametersTableModel) parametersTable.getModel()).getParameters());
            consideration.setCurve(((CurvePane) curveContainer).getCurve().copy());
            return consideration;
        } catch (Exception ex) {
            throw new IllegalStateException("Failed to instantiate " + selectedItem.getConsiderationClass().getSimpleName(), ex);
        }
    }

    private void createUIComponents() {
        parametersTable = new ConsiderationParametersTable(new ParametersTableModel());
        parametersTable.setModel(new ParametersTableModel());

        considerationComboBox = new JComboBox<>(TWConsiderationClass.values());
        considerationComboBox.setSelectedItem(null);

        curveContainer = new CurvePane();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        considerationPane = new JPanel();
        considerationPane.setLayout(new GridLayoutManager(4, 1, new Insets(0, 0, 0, 0), -1, -1));
        considerationPane.setAutoscrolls(false);
        considerationPane.setMaximumSize(new Dimension(800, 600));
        considerationPane.setMinimumSize(new Dimension(800, 300));
        considerationPane.setPreferredSize(new Dimension(800, 600));
        topThingsPane = new JPanel();
        topThingsPane.setLayout(new GridLayoutManager(6, 6, new Insets(0, 0, 0, 0), -1, -1));
        considerationPane.add(topThingsPane, new GridConstraints(0, 0, 2, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        topThingsPane.add(considerationComboBox, new GridConstraints(1, 0, 1, 6, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        considerationName = new JTextField();
        topThingsPane.add(considerationName, new GridConstraints(3, 0, 1, 6, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        topThingsPane.add(curveContainer, new GridConstraints(5, 0, 1, 6, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_GROW, new Dimension(400, 300), new Dimension(400, 300), null, 0, false));
        final JLabel label1 = new JLabel();
        this.$$$loadLabelText$$$(label1, this.$$$getMessageFromBundle$$$("megamek/common/options/messages", "aiEditor.curve"));
        topThingsPane.add(label1, new GridConstraints(4, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(66, 17), null, 0, false));
        final JLabel label2 = new JLabel();
        this.$$$loadLabelText$$$(label2, this.$$$getMessageFromBundle$$$("megamek/common/options/messages", "aiEditor.name"));
        topThingsPane.add(label2, new GridConstraints(2, 0, 1, 6, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label3 = new JLabel();
        this.$$$loadLabelText$$$(label3, this.$$$getMessageFromBundle$$$("megamek/common/options/messages", "aiEditor.considerationType"));
        topThingsPane.add(label3, new GridConstraints(0, 0, 1, 6, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label4 = new JLabel();
        this.$$$loadLabelText$$$(label4, this.$$$getMessageFromBundle$$$("megamek/common/options/messages", "aiEditor.parameters"));
        considerationPane.add(label4, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        parametersTable.setFillsViewportHeight(false);
        parametersTable.setPreferredScrollableViewportSize(new Dimension(100, 50));
        considerationPane.add(parametersTable, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        label2.setLabelFor(considerationName);
        label3.setLabelFor(considerationComboBox);
    }

    private static Method $$$cachedGetBundleMethod$$$ = null;

    private String $$$getMessageFromBundle$$$(String path, String key) {
        ResourceBundle bundle;
        try {
            Class<?> thisClass = this.getClass();
            if ($$$cachedGetBundleMethod$$$ == null) {
                Class<?> dynamicBundleClass = thisClass.getClassLoader().loadClass("com.intellij.DynamicBundle");
                $$$cachedGetBundleMethod$$$ = dynamicBundleClass.getMethod("getBundle", String.class, Class.class);
            }
            bundle = (ResourceBundle) $$$cachedGetBundleMethod$$$.invoke(null, path, thisClass);
        } catch (Exception e) {
            bundle = ResourceBundle.getBundle(path);
        }
        return bundle.getString(key);
    }

    private void $$$loadLabelText$$$(JLabel component, String text) {
        StringBuffer result = new StringBuffer();
        boolean haveMnemonic = false;
        char mnemonic = '\0';
        int mnemonicIndex = -1;
        for (int i = 0; i < text.length(); i++) {
            if (text.charAt(i) == '&') {
                i++;
                if (i == text.length()) break;
                if (!haveMnemonic && text.charAt(i) != '&') {
                    haveMnemonic = true;
                    mnemonic = text.charAt(i);
                    mnemonicIndex = result.length();
                }
            }
            result.append(text.charAt(i));
        }
        component.setText(result.toString());
        if (haveMnemonic) {
            component.setDisplayedMnemonic(mnemonic);
            component.setDisplayedMnemonicIndex(mnemonicIndex);
        }
    }

    public JComponent $$$getRootComponent$$$() {
        return considerationPane;
    }

}
