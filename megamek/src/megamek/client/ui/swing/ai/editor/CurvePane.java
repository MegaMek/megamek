/*
 * Copyright (c) 2024 - The MegaMek Team. All Rights Reserved.
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the Free
 * Software Foundation; either version 2 of the License, or (at your option)
 * any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 * for more details.
 *
 */

package megamek.client.ui.swing.ai.editor;

import megamek.ai.utility.Curve;
import megamek.ai.utility.DefaultCurve;

import javax.swing.*;
import java.awt.*;
import java.lang.reflect.Method;
import java.util.ResourceBundle;
import java.util.concurrent.atomic.AtomicReference;

public class CurvePane extends JPanel {
    private JComboBox<DefaultCurve> curveTypeComboBox;
    private JSpinner bParamSpinner;
    private JSpinner mParamSpinner;
    private JSpinner kParamSpinner;
    private JSpinner cParamSpinner;
    private JPanel curveGraph;
    private JPanel basePane;

    private final AtomicReference<Curve> selectedCurve = new AtomicReference<>();

    public CurvePane() {
        $$$setupUI$$$();
        setLayout(new BorderLayout());
        add(basePane, BorderLayout.CENTER);
    }

    public void setCurve(Curve curve) {
        curveTypeComboBox.setSelectedItem(DefaultCurve.fromCurve(curve));
        selectedCurve.set(curve.copy());
        updateCurveDataUI();
    }

    public Curve getCurve() {
        return selectedCurve.get();
    }

    public void setHoverStateModel(HoverStateModel model) {
        ((CurveGraph) this.curveGraph).setHoverStateModel(model);
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        basePane = new JPanel();
        basePane.setLayout(new GridBagLayout());
        basePane.setBackground(new Color(-13947600));
        GridBagConstraints gbc;
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 1;
        gbc.gridwidth = 2;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        basePane.add(curveTypeComboBox, gbc);
        final JLabel label1 = new JLabel();
        this.$$$loadLabelText$$$(label1, this.$$$getMessageFromBundle$$$("megamek/common/options/messages", "aiEditor.curve.type"));
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.anchor = GridBagConstraints.WEST;
        basePane.add(label1, gbc);
        curveGraph.setBackground(new Color(-13947600));
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.gridwidth = 11;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.BOTH;
        basePane.add(curveGraph, gbc);
        gbc = new GridBagConstraints();
        gbc.gridx = 4;
        gbc.gridy = 1;
        gbc.weightx = 1.0;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        basePane.add(bParamSpinner, gbc);
        gbc = new GridBagConstraints();
        gbc.gridx = 6;
        gbc.gridy = 1;
        gbc.weightx = 1.0;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        basePane.add(mParamSpinner, gbc);
        gbc = new GridBagConstraints();
        gbc.gridx = 8;
        gbc.gridy = 1;
        gbc.weightx = 1.0;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        basePane.add(kParamSpinner, gbc);
        gbc = new GridBagConstraints();
        gbc.gridx = 10;
        gbc.gridy = 1;
        gbc.weightx = 1.0;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        basePane.add(cParamSpinner, gbc);
        final JLabel label2 = new JLabel();
        label2.setText("b");
        gbc = new GridBagConstraints();
        gbc.gridx = 3;
        gbc.gridy = 1;
        gbc.anchor = GridBagConstraints.EAST;
        basePane.add(label2, gbc);
        final JLabel label3 = new JLabel();
        label3.setText("m");
        gbc = new GridBagConstraints();
        gbc.gridx = 5;
        gbc.gridy = 1;
        gbc.anchor = GridBagConstraints.EAST;
        basePane.add(label3, gbc);
        final JLabel label4 = new JLabel();
        label4.setText("k");
        gbc = new GridBagConstraints();
        gbc.gridx = 7;
        gbc.gridy = 1;
        gbc.anchor = GridBagConstraints.EAST;
        basePane.add(label4, gbc);
        final JLabel label5 = new JLabel();
        label5.setText("c");
        gbc = new GridBagConstraints();
        gbc.gridx = 9;
        gbc.gridy = 1;
        gbc.anchor = GridBagConstraints.EAST;
        basePane.add(label5, gbc);
    }

    private static Method $$$cachedGetBundleMethod$$$ = null;

    private String $$$getMessageFromBundle$$$(String path, String key) {
        ResourceBundle bundle;
        try {
            Class<?> thisClass = this.getClass();
            if ($$$cachedGetBundleMethod$$$ == null) {
                Class<?> dynamicBundleClass = thisClass.getClassLoader().loadClass("com.intellij.DynamicBundle");
                $$$cachedGetBundleMethod$$$ = dynamicBundleClass.getMethod("getBundle", String.class, Class.class);
            }
            bundle = (ResourceBundle) $$$cachedGetBundleMethod$$$.invoke(null, path, thisClass);
        } catch (Exception e) {
            bundle = ResourceBundle.getBundle(path);
        }
        return bundle.getString(key);
    }


    private void $$$loadLabelText$$$(JLabel component, String text) {
        StringBuffer result = new StringBuffer();
        boolean haveMnemonic = false;
        char mnemonic = '\0';
        int mnemonicIndex = -1;
        for (int i = 0; i < text.length(); i++) {
            if (text.charAt(i) == '&') {
                i++;
                if (i == text.length()) break;
                if (!haveMnemonic && text.charAt(i) != '&') {
                    haveMnemonic = true;
                    mnemonic = text.charAt(i);
                    mnemonicIndex = result.length();
                }
            }
            result.append(text.charAt(i));
        }
        component.setText(result.toString());
        if (haveMnemonic) {
            component.setDisplayedMnemonic(mnemonic);
            component.setDisplayedMnemonicIndex(mnemonicIndex);
        }
    }


    public JComponent $$$getRootComponent$$$() {
        return basePane;
    }

    private void createUIComponents() {
        curveTypeComboBox = new JComboBox<>(DefaultCurve.values());

        curveTypeComboBox.addActionListener(e1 -> {
            if (curveTypeComboBox.getSelectedItem() != null) {
                var curve = ((DefaultCurve) curveTypeComboBox.getSelectedItem()).getCurve().copy();
                selectedCurve.set(curve.copy());
                updateCurveDataUI();
            }
        });

        curveGraph = new CurveGraph(selectedCurve);

        curveGraph.setPreferredSize(new Dimension(800, 600));
        bParamSpinner = new JSpinner(new SpinnerNumberModel(0d, -100d, 100d, 0.01d));
        mParamSpinner = new JSpinner(new SpinnerNumberModel(0d, -100d, 100d, 0.01d));
        kParamSpinner = new JSpinner(new SpinnerNumberModel(0d, -100d, 100d, 0.01d));
        cParamSpinner = new JSpinner(new SpinnerNumberModel(0d, -100d, 100d, 0.01d));

        mParamSpinner.addChangeListener(e -> {
            if (selectedCurve.get() != null) {
                selectedCurve.get().setM((Double) mParamSpinner.getValue());
            }
            curveGraph.repaint();
        });
        bParamSpinner.addChangeListener(e -> {
            if (selectedCurve.get() != null) {
                selectedCurve.get().setB((Double) bParamSpinner.getValue());
            }
            curveGraph.repaint();
        });
        kParamSpinner.addChangeListener(e -> {
            if (selectedCurve.get() != null) {
                selectedCurve.get().setK((Double) kParamSpinner.getValue());
            }
            curveGraph.repaint();
        });
        cParamSpinner.addChangeListener(e -> {
            if (selectedCurve.get() != null) {
                selectedCurve.get().setC((Double) cParamSpinner.getValue());
            }
            curveGraph.repaint();
        });
    }

    private void updateCurveDataUI() {
        curveGraph.repaint();
        var curve = selectedCurve.get();
        Class<?> curveClass = curve.getClass();

        // B
        boolean hasB = isMethodOverridden(curveClass, Curve.class, "getB");
        bParamSpinner.setEnabled(hasB);
        if (hasB) {
            bParamSpinner.setValue(curve.getB());
        }

        // M
        boolean hasM = isMethodOverridden(curveClass, Curve.class, "getM");
        mParamSpinner.setEnabled(hasM);
        if (hasM) {
            mParamSpinner.setValue(curve.getM());
        }

        // K
        boolean hasK = isMethodOverridden(curveClass, Curve.class, "getK");
        kParamSpinner.setEnabled(hasK);
        if (hasK) {
            kParamSpinner.setValue(curve.getK());
        }

        // C
        boolean hasC = isMethodOverridden(curveClass, Curve.class, "getC");
        cParamSpinner.setEnabled(hasC);
        if (hasC) {
            cParamSpinner.setValue(curve.getC());
        }
    }

    public static boolean isMethodOverridden(
        Class<?> clazz,
        Class<?> interfaceClass,
        String methodName,
        Class<?>... paramTypes
    ) {
        try {
            // The method from the interface
            var interfaceMethod = interfaceClass.getMethod(methodName, paramTypes);
            // The method as found on the concrete class
            var classMethod = clazz.getMethod(methodName, paramTypes);

            // If the declaring class is different, the method is overridden
            return !classMethod.getDeclaringClass().equals(interfaceMethod.getDeclaringClass());
        } catch (NoSuchMethodException e) {
            // If the class or interface does not declare the method at all
            return false;
        }
    }
}
