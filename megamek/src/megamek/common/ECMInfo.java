package megamek.common;

/**
 * A class that keeps track of information related to an ECM field.
 * @author arlith
 *
 */
public class ECMInfo implements Comparable {
    
    /**
     * The radius of the ECM field.
     */
    public int range;
    
    /**
     * The center location of the ECM field.
     */
    public Coords pos;
    
    /**
     * The id of the owning player, used to determine if this ECMInfo belongs to
     * an enemy or not.
     */
    public IPlayer owner;
    /**
     * The strength of the ECM field, counted in number of fields.
     */
    public double strength = 0;
    
    /**
     * Determines if this field is generated by an Angel ECM, since Angel ECMs
     * are inherently stronger than those from other ECM.
     */
    public int angelStrength = 0;
    
    /**
     * Determines if this field is ECM or ECCM.
     */
    public boolean isECCM = false;
    
    public ECMInfo() {
    }
    
    public ECMInfo(int range, double strength, IPlayer o, Coords p) {
        owner = o;
        pos = p;        
        this.range = range;
        this.strength = strength;
    }
    
    public ECMInfo(int range, double strength, Entity e) {
        owner = e.getOwner();
        pos = e.getPosition();        
        this.range = range;
        this.strength = strength;
    }
    
    public ECMInfo(int range, Coords pos, IPlayer owner, double strength,
            int angelStrength, boolean isECCM) {

        this.range = range;
        this.pos = pos;
        this.owner = owner;
        this.strength = strength;
        this.angelStrength = angelStrength;
        this.isECCM = isECCM;
    }
    
    public boolean isAngel() {
        return angelStrength > 0;
    }
    /**
     * 
     * @param r  
     * @param p
     * @param s
     */
    public ECMInfo(int r, Coords p, double s) {
        range = r;
        pos = p;
        strength = s;
    }
    
    public void addECMEffects(ECMInfo other) {
        // Enemy ECM (ECM without an owner is always considered an enemy)
        if (((other.owner == null) || owner.isEnemyOf(other.owner)) 
                && !other.isECCM) {
            strength += other.strength;
            angelStrength += other.angelStrength;
        // Allied ECCM
        } else if ((other.owner != null) && !owner.isEnemyOf(other.owner) 
                && other.isECCM) {
            strength -= other.strength;
            angelStrength -= other.angelStrength;
        }
        // Set the ECCM flag
        if (angelStrength < 0 || (strength < 0 && angelStrength < 1)) {
            isECCM = true;
        } else {
            isECCM = false;
        }
        
    }
    
    public String toString() {
        String ownerString;
        String strengthString;
        String eccmString;
        
        if (owner != null) {
            ownerString = owner.getName();
        } else {
            ownerString = "none";
        }
        if (angelStrength != 0) {
            strengthString = "aS: " + angelStrength;
        } else {
            strengthString = "s: " + strength;
        }
        if (isECCM) {
            eccmString = ", ECCM";
        } else {
            eccmString = "";
        }
        return "(" + pos.toString() + ", " + ownerString + ", r:" + range + ", "
                + strengthString +  eccmString + ")";
    }

    /**
     * Compares two ECMInfo objects; ordering is based on strength, with Angel
     * strength trumping regular strength. 
     */
    @Override
    public int compareTo(Object o) {
        if (!(o instanceof ECMInfo)) {
            return 1;
        }
        ECMInfo other = (ECMInfo)o;
        if (other.angelStrength > angelStrength) {
            return -1;
        } else if (other.angelStrength < angelStrength) {
            return 1;
        } else { // Angel strengths are equal
            if (other.strength > strength) {
                return -1;
            } else if (other.strength < strength) {
                return 1;
            }
        }
        // Both angel and regular strength are equal
        return 0;
    }
}