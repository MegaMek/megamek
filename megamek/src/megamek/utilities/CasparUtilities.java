package megamek.utilities;

import megamek.ai.neuralnetwork.NeuralNetwork;

import java.io.IOException;

public class CasparUtilities {

    private static final float[] x_test = new float[]{0.8f, 0.11f, 0.75f, 0.9f, 0.0f, 0.0f, 0.6f, 0.33333333333333337f, 0.8211145618000169f, 1.0f, 0.16666666666666666f, 0.125f, 0.8096056723534023f, 1.0f, 1.0f, 1.0f, 1.0f, 1.0f, 0.44999999999999996f, 0.20202020202020202f, 0.0f, 1.0f, 0.8f, 0.24f, 0.0f, 0.12546440075000703f, 0.44768453788272183f, 1.0f, 0.76f, 0.0f, 0.2f, 0.95f, 0.0f, 0.0f, 0.0f, 0.5f, 0.0f, 0.0f, 0.0f, 0.14285714285714285f, 0.24f, 0.117393568818739f, 0.1707718207057594f, 0.0f, 0.49887499999999996f, 1.0f, 0.0f, 0.7763932022500211f, 0.0f, 0.16161616161616163f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.09089701029804781f, 0.10753562106944418f, 0.11599752659446001f, 0.10753562106944418f, 0.09089701029804781f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.10753562106944418f, 0.14414324615147733f, 0.17399628989169f, 0.14414324615147733f, 0.10753562106944418f, 0.0f, 0.0f, 0.0f, 0.0f, 0.086998144945845f, 0.11599752659446001f, 0.17399628989169f, 0.34799257978338f, 0.17399628989169f, 0.11599752659446001f, 0.086998144945845f, 0.0f, 0.0f, 0.0f, 0.0f, 0.10753562106944418f, 0.14414324615147733f, 0.17399628989169f, 0.14414324615147733f, 0.10753562106944418f, 0.11599752659446001f, 0.10753562106944418f, 0.09089701029804781f, 0.0f, 0.0f, 0.09089701029804781f, 0.10753562106944418f, 0.11599752659446001f, 0.10753562106944418f, 0.14414324615147733f, 0.17399628989169f, 0.14414324615147733f, 0.10753562106944418f, 0.0f, 0.0f, 0.0f, 0.0f, 0.086998144945845f, 0.11599752659446001f, 0.17399628989169f, 0.34799257978338f, 0.17399628989169f, 0.11599752659446001f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.10753562106944418f, 0.14414324615147733f, 0.17399628989169f, 0.14414324615147733f, 0.10753562106944418f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.09089701029804781f, 0.10753562106944418f, 0.11599752659446001f, 0.10753562106944418f, 0.09089701029804781f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.086998144945845f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.11825438871301534f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.12355401825323255f, 0.14617046308697085f, 0.15767251828402049f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.08514315987337105f, 0.0f, 0.14617046308697085f, 0.19593028646028327f, 0.2365087774260307f, 0.0f, 0.0f, 0.0f, 0.08895889314232744f, 0.105242733422619f, 0.11352421316449474f, 0.11825438871301534f, 0.15767251828402049f, 0.2365087774260307f, 0.4730175548520614f, 0.0f, 0.0f, 0.0f, 0.105242733422619f, 0.14106980625140395f, 0.1702863197467421f, 0.14106980625140395f, 0.14617046308697085f, 0.19593028646028327f, 0.2365087774260307f, 0.0f, 0.0f, 0.08514315987337105f, 0.11352421316449474f, 0.1702863197467421f, 0.3405726394934842f, 0.1702863197467421f, 0.12355401825323255f, 0.14617046308697085f, 0.15767251828402049f, 0.2885889570552147f, 0.2885889570552147f, 0.2885889570552147f, 0.2885889570552147f, 0.025252525252525252f, 0.025252525252525252f, 0.025252525252525252f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, -1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, -1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 3.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f};
    private static final float y_test = 0.8647426981919333f;

    public static void main(String[] args) throws IOException {
        NeuralNetwork.testTensorFlow();
        NeuralNetwork neuralNetwork = new NeuralNetwork();

        String modelPath = "userdata/ai/brains/model/"; // "/Users/coppio/Projects/megamek/megamek/userdata/ai/brains
        // /caspar_v939.h5");
        neuralNetwork.loadModel(modelPath);
        float result = neuralNetwork.predict(x_test);
        System.out.println("Prediction result: " + result);
        System.out.println("Expected result: " + y_test);
        System.out.println("Loss (difference): " + Math.abs(result - y_test));
        System.out.println("Hello, world!");
    }
}
